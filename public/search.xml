<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/20/hello_world/hello_world/"/>
      <url>/2023/04/20/hello_world/hello_world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to my Blog!</p><h2 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h2><h3 id="git-config命令预先配置好相关的用户信息"><a class="markdownIt-Anchor" href="#git-config命令预先配置好相关的用户信息"></a> git config命令预先配置好相关的用户信息</h3><pre><code class="hljs shell">git config --global user.name &quot;你的名字或昵称&quot;git config --global user.email &quot;你的邮箱&quot;</code></pre><h3 id="三步走"><a class="markdownIt-Anchor" href="#三步走"></a> 三步走</h3><pre><code class="hljs shell">git add . #将当前目录所有文件添加到git暂存区git commit -m &quot;my first commit&quot; #提交并备注提交信息git push origin master #将本地提交推送到远程仓库</code></pre><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="安装的插件"><a class="markdownIt-Anchor" href="#安装的插件"></a> 安装的插件</h3><h4 id="网址转拼音插件"><a class="markdownIt-Anchor" href="#网址转拼音插件"></a> 网址转拼音插件</h4><h5 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h5><pre><code class="hljs shell">npm i hexo-permalink-pinyin --save</code></pre><h5 id="配置及使用"><a class="markdownIt-Anchor" href="#配置及使用"></a> 配置及使用</h5><p>在根目录中的_config.yml中国添加</p><pre><code class="hljs yml"><span class="hljs-comment"># 网站 文字转拼音</span><span class="hljs-attr">permalink_pinyin:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">separator:</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-comment"># default: &#x27;-&#x27;</span></code></pre><h4 id="hexo-electric-clock-电子时钟插件"><a class="markdownIt-Anchor" href="#hexo-electric-clock-电子时钟插件"></a> hexo-electric-clock 电子时钟插件</h4><h5 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h5><pre><code class="hljs shell">npm i hexo-electric-clock --save</code></pre><h5 id="配置及使用-2"><a class="markdownIt-Anchor" href="#配置及使用-2"></a> 配置及使用</h5><p>不是主题的yml文件</p><pre><code class="hljs yml"><span class="hljs-attr">electric_clock:</span>  <span class="hljs-attr">priority:</span> <span class="hljs-number">5</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">all</span>  <span class="hljs-attr">layout:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">class</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">sticky_layout</span>    <span class="hljs-attr">index:</span> <span class="hljs-number">0</span>  <span class="hljs-attr">temple_html:</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">  &lt;div class=&quot;card-widget card-clock&quot;&gt;</span><span class="hljs-string">    &lt;!-- 挂载容器 --&gt;</span><span class="hljs-string">    &lt;div class=&quot;card-glass&quot;&gt;</span><span class="hljs-string">      &lt;div class=&quot;card-background&quot;&gt;</span><span class="hljs-string">        &lt;div class=&quot;card-content&quot;&gt;</span><span class="hljs-string">          &lt;div id=&quot;hexo_electric_clock&quot;&gt;</span><span class="hljs-string">            &lt;img</span><span class="hljs-string">              id=&quot;card-clock-loading&quot;</span><span class="hljs-string">              src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot;</span><span class="hljs-string">              style=&quot;height: 120px; width: 100%;&quot;</span><span class="hljs-string">              data-ll-status=&quot;loading&quot;</span><span class="hljs-string">              class=&quot;entered loading&quot;</span><span class="hljs-string">            /&gt;</span><span class="hljs-string">          &lt;/div&gt;</span><span class="hljs-string">        &lt;/div&gt;</span><span class="hljs-string">      &lt;/div&gt;</span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">  &lt;/div&gt;&#x27;</span></code></pre><h4 id="chart动态图标插件"><a class="markdownIt-Anchor" href="#chart动态图标插件"></a> Chart动态图标插件</h4><h5 id="安装-3"><a class="markdownIt-Anchor" href="#安装-3"></a> 安装</h5><pre><code class="hljs shell">npm install hexo-tag-chart --save</code></pre><h5 id="配置及使用-3"><a class="markdownIt-Anchor" href="#配置及使用-3"></a> 配置及使用</h5><pre><code class="hljs markdown">&lt;!--fontColor:数据颜色--&gt;&lt;!--padding:上下左右填充--&gt;&lt;!--suggestedMin:最小值--&gt;&#123;% p center logo large, Hello😜 %&#125;<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><span class="hljs-emphasis"><span class="hljs-strong"></span></span><span class="hljs-emphasis"><span class="hljs-strong">&#123;% p center h1, 一个用JS开发的硬件工程师 😋 %&#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong"></span></span><span class="hljs-emphasis"><span class="hljs-strong">&#123;% p center small, 雷达图看不到刷新刷新就好啦 %&#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong"></span></span><span class="hljs-emphasis"><span class="hljs-strong">&#123;% chart 100% 300 %&#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">&#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">  type: &#x27;radar&#x27;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">  data: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    labels: [&#x27;C&#x27;, &#x27;Python&#x27;, &#x27;HTML&#x27;, &#x27;micropython&#x27;, &#x27;ESP8266&#x27;, &#x27;ESP32&#x27;, &#x27;STM32&#x27;, &#x27;SCT15&#x27;, &#x27;微信小程序&#x27;],</span></span><span class="hljs-emphasis"><span class="hljs-strong">    datasets: [&#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    label: &#x27;值&#x27;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    backgroundColor: &#x27;#9400D377&#x27;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    borderColor: &#x27;#9400D3&#x27;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    data: [20, 50, 40, 80, 40, 80, 55, 55, 10],</span></span><span class="hljs-emphasis"><span class="hljs-strong">    lineTension: 0.2,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    pointStyle: &#x27;rectRounded&#x27;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    pointHoverBackgroundColor: &#x27;#FFFFFF&#x27;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    &#125;]</span></span><span class="hljs-emphasis"><span class="hljs-strong">  &#125;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">  options: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    legend: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">        labels: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">            fontColor: &#x27;#9400D3&#x27;, &lt;!--数据颜色--&gt;</span></span><span class="hljs-emphasis"><span class="hljs-strong">            fontSize: 12,</span></span><span class="hljs-emphasis"><span class="hljs-strong">            FontFamily: &#x27;&#x27;</span></span><span class="hljs-emphasis"><span class="hljs-strong">        &#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    &#125;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    layout: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">      padding: &#123; &lt;!--上下左右填充--&gt;</span></span><span class="hljs-emphasis"><span class="hljs-strong">        left: 0,</span></span><span class="hljs-emphasis"><span class="hljs-strong">        right: 0,</span></span><span class="hljs-emphasis"><span class="hljs-strong">        top: 0,</span></span><span class="hljs-emphasis"><span class="hljs-strong">        bottom: 0</span></span><span class="hljs-emphasis"><span class="hljs-strong">      &#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    &#125;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    responsive: true,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    title: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">      display: true,</span></span><span class="hljs-emphasis"><span class="hljs-strong">      text: &#x27;My dataset&#x27;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    &#125;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">    scale: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">        angleLines: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">            display: true</span></span><span class="hljs-emphasis"><span class="hljs-strong">        &#125;,</span></span><span class="hljs-emphasis"><span class="hljs-strong">        ticks: &#123;</span></span><span class="hljs-emphasis"><span class="hljs-strong">            suggestedMin: 0,    &lt;!--最小值--&gt;</span></span><span class="hljs-emphasis"><span class="hljs-strong">            suggestedMax: 80  &lt;!--最大值--&gt;</span></span><span class="hljs-emphasis"><span class="hljs-strong">        &#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">    &#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">  &#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">&#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong">&#123;% endchart %&#125;</span></span><span class="hljs-emphasis"><span class="hljs-strong"></span></span><span class="hljs-emphasis"><span class="hljs-strong"></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SiYuan在docker中自动同步</title>
      <link href="/2022/09/09/siyuan_zai_docker_zhong_zi_dong_tong_bu/siyuan_zai_docker_zhong_zi_dong_tong_bu/"/>
      <url>/2022/09/09/siyuan_zai_docker_zhong_zi_dong_tong_bu/siyuan_zai_docker_zhong_zi_dong_tong_bu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="20220909-fri"><a class="markdownIt-Anchor" href="#20220909-fri"></a> 2022.09.09 Fri</h1><h1 id="如何同步思源笔记"><a class="markdownIt-Anchor" href="#如何同步思源笔记"></a> 如何同步思源笔记</h1><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><ol><li>SiYuan Note</li><li>Docker</li><li>syncthing</li></ol><h2 id="如何解决"><a class="markdownIt-Anchor" href="#如何解决"></a> 如何解决</h2><p>思源笔记软件本体不能同步，网上有一些教程是通过Onedrive同步的，但是需要账号，使用云端资源，于是便想到可以在本地搭建文件同步的服务用于解决笔记同步问题。</p><p>于是我上网寻找，最后找到了syncting</p><h2 id="开始搭建"><a class="markdownIt-Anchor" href="#开始搭建"></a> 开始搭建</h2><h3 id="思源笔记"><a class="markdownIt-Anchor" href="#思源笔记"></a> 思源笔记</h3><p>提示：您可以更改“/your/workspace/part”。 思源的数据存储在“/your/workspace/part”中。 我们稍后会使用它。</p><pre><code class="hljs bash">sudo docker run -v /your/workspace/part:/siyuan/workspace -p 6806:6806 -u 1000:1000 --restart=always b3log/siyuan --workspace=/siyuan/workspace/</code></pre><h3 id="搭建-syncthing"><a class="markdownIt-Anchor" href="#搭建-syncthing"></a> 搭建 syncthing</h3><p>你可以根据你的情况改变 “~/docker_softsoftware_date/st-sync” 的内容</p><pre><code class="hljs bash">sudo docker run -d -p 8384:8384 -p 22000:22000 -v ~/docker_softsoftware_date/st-sync:/var/syncthing --restart=always syncthing/syncthing:latest</code></pre><h3 id="syncthing-设置"><a class="markdownIt-Anchor" href="#syncthing-设置"></a> Syncthing 设置.</h3><h4 id="windows-or-linux"><a class="markdownIt-Anchor" href="#windows-or-linux"></a> Windows or Linux</h4><h5 id="添加远程设备"><a class="markdownIt-Anchor" href="#添加远程设备"></a> 添加远程设备</h5><p>复制设备 ID</p><p><img src="image-20220909173428-2pb8iw2.png" alt="image" />​</p><p>将设备 ID 粘贴到局域网上的其他设备中。</p><p><img src="image-20220909173836-jdgjywa.png" alt="image" />​</p><h5 id="add-folder"><a class="markdownIt-Anchor" href="#add-folder"></a> Add folder</h5><p><img src="image-20220909174240-m8epauq.png" alt="image" />​</p><p>在不同的终端设备添加共享文件夹</p><p>添加思源数据文件&quot;/your/workspace/part&quot;</p><p>另一台设备添加路径，就像这样： “E:\usr\siyuan\Siyun”</p><h4 id="android"><a class="markdownIt-Anchor" href="#android"></a> Android</h4><h5 id="操作很简单基本和上面一样-下面是应用的截图"><a class="markdownIt-Anchor" href="#操作很简单基本和上面一样-下面是应用的截图"></a> 操作很简单，基本和上面一样。下面是应用的截图。</h5><p><img src="a8db527d00df11a1ce3d44f8ee0eee1-20220909194939-55qhm16.jpg" alt="a8db527d00df11a1ce3d44f8ee0eee1" />​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B搭建java MC服务器</title>
      <link href="/2022/06/08/shu_mei_pai_4b_da_jian_java_mc_fu_wu_qi/shu_mei_pai_4b_da_jian_java_mc_fu_wu_qi/"/>
      <url>/2022/06/08/shu_mei_pai_4b_da_jian_java_mc_fu_wu_qi/shu_mei_pai_4b_da_jian_java_mc_fu_wu_qi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="java-安装"><a class="markdownIt-Anchor" href="#java-安装"></a> Java 安装</h2><p>安装java</p><pre><code class="hljs shell">sudo apt updatesudo apt install default-jdksudo apt install openjdk-8-jdksudo apt install openjdk-11-jdk</code></pre><p>选择默认java版本，跟换成11</p><pre><code class="hljs shell">sudo update-alternatives --config java</code></pre><h2 id="服务器构建器下载及其安装"><a class="markdownIt-Anchor" href="#服务器构建器下载及其安装"></a> 服务器构建器下载及其安装</h2><p><a target="_blank" rel="noopener" href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.18.2.html">下载链接</a></p><p><a target="_blank" rel="noopener" href="https://files.minecraftforge.net/net/minecraftforge/forge/">所有版本</a></p><p>点击下载</p><p><img src="1.png" alt="1.png" /></p><p>或者：</p><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://maven.minecraftforge.net/net/minecraftforge/forge/<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">2</span>-<span class="hljs-number">40</span>.<span class="hljs-number">1</span>.<span class="hljs-number">48</span>/forge-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">2</span>-<span class="hljs-number">40</span>.<span class="hljs-number">1</span>.<span class="hljs-number">48</span>-installer.jar</code></pre><p>安装</p><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar forge-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">2</span>-<span class="hljs-number">40</span>.<span class="hljs-number">1</span>.<span class="hljs-number">48</span>-installer.jar -install</code></pre><p>会弹出图形界面，安装完成</p><h2 id="运行服务器"><a class="markdownIt-Anchor" href="#运行服务器"></a> 运行服务器</h2><p>cd 到安装目录，linux运行</p><pre><code class="hljs stata">./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span></code></pre><p>配置eula.txt</p><pre><code class="hljs ini"><span class="hljs-attr">eula</span>=<span class="hljs-literal">true</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MOS管(Mosfet)</title>
      <link href="/2022/06/01/mos_guan_mosfet/mos_guan_mosfet/"/>
      <url>/2022/06/01/mos_guan_mosfet/mos_guan_mosfet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三极管和-mosfet-对比"><a class="markdownIt-Anchor" href="#三极管和-mosfet-对比"></a> 三极管和 MOSFET 对比</h2><h3 id="三极管"><a class="markdownIt-Anchor" href="#三极管"></a> 三极管</h3><p>三极管简称晶体管，分为 NPN 型和 PNP 型两种，是最重要的一种半导体器件。它用于放大作用和开关作用。</p><h3 id="mosfet"><a class="markdownIt-Anchor" href="#mosfet"></a> Mosfet</h3><p>就是场效应管，是一种较新型的半导体器件。外形与普通晶体管相似，但两者的控制特性却截然不同。</p><h3 id="mos-相对三极管的优势"><a class="markdownIt-Anchor" href="#mos-相对三极管的优势"></a> Mos 相对三极管的优势</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">MOSFET</th><th style="text-align:center">二极管</th><th style="text-align:center">结论</th></tr></thead><tbody><tr><td style="text-align:center">驱动方式</td><td style="text-align:center">电压驱动</td><td style="text-align:center">电流驱动</td><td style="text-align:center">MOSFET 更节能</td></tr><tr><td style="text-align:center">热稳定性</td><td style="text-align:center">多子参与导电</td><td style="text-align:center">多子、少子参与导电</td><td style="text-align:center">MOSFET 更稳定</td></tr><tr><td style="text-align:center">压降</td><td style="text-align:center">0V 无压降</td><td style="text-align:center">0.3V</td><td style="text-align:center">MOSFET 更合适集成</td></tr></tbody></table><h2 id="原理对比"><a class="markdownIt-Anchor" href="#原理对比"></a> 原理对比</h2><table><thead><tr><th style="text-align:center">MOSFET</th><th style="text-align:center">二极管</th></tr></thead><tbody><tr><td style="text-align:center">通过控制基极电流才能达到控制集电极电流或发射极电流的目</td><td style="text-align:center">它的输出电流决定于输入端电压的大小，基本上不需要信号源提供电流。</td></tr></tbody></table><h2 id="mosfet-2"><a class="markdownIt-Anchor" href="#mosfet-2"></a> MOSFET</h2><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><p>分类 --&gt; 原理（N 沟道增强型） --&gt; 电气特性</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><p>按沟道：</p><ul><li>N 沟道</li><li>P 沟道</li></ul><p>按栅极电压：</p><ul><li>耗尽型：当栅极电压为零时漏源极之间就存在导电沟道。</li><li>增强型：有电压才导通<ul><li>对于<code>N</code>沟道器件，栅极电压<code>大于</code>零(<code>&lt;0</code>)时才存在导电沟道。</li><li>对于<code>P</code>沟道器件，栅极电压<code>小于</code>零(<code>&gt;0</code>)时才存在导电沟道。</li></ul></li></ul><p>功率 MOSFET 主要是：N 沟道增强型。</p><h3 id="几种分类及其图标"><a class="markdownIt-Anchor" href="#几种分类及其图标"></a> 几种分类及其图标</h3><h3 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h3><p><img src="1.jpg" alt="1.jpg" /><br />图中各部分从上往下依次是：</p><ul><li>栅极(Gate)</li><li>漏极(Drain)</li><li>源极(Source)</li><li>橘黄色：金属</li><li>黄色：氧化物</li><li>浅红色：P 掺杂</li><li>深红色：耗尽区(depletion region)</li></ul><p>一下过程模拟<code>栅极(Gate)</code>加压</p><ol><li>当<code>栅极(Gate)</code>未施加电压时(=0)，<code>漏极(Drain)</code>和<code>源极(Source)</code>是断开的，如1.jpg。</li><li>当<code>栅极(Gate)</code>施加电压且<code>大于0</code>(<code>&gt;0</code>)时，<code>漏极(Drain)</code>和<code>源极(Source)</code>是断开的，但是栅极金属层将聚集正电荷，如2.jpg。</li><li>当<code>栅极(Gate)</code>施加电压且<code>大于V_TH</code>(<code>&gt;V_TH</code>)时，<code>漏极(Drain)</code>和<code>源极(Source)</code>之间形成反型层(inversion layer)，反型层相当于N掺杂的半导体，因此<code>漏极(Drain)</code>和<code>源极(Source)</code>直接连通，因此MOSFET导电沟道形成，进入<code>导通</code>状态。如3.jpg。<br /><img src="2.jpg" alt="2.jpg" /><br /><img src="3.jpg" alt="3.jpg" /></li></ol><h3 id="输出特性"><a class="markdownIt-Anchor" href="#输出特性"></a> 输出特性</h3><p><img src="4.jpg" alt="4.jpg" /></p><ol><li>夹断区(cutoff mode)</li><li>线性区(linear mode)</li><li>饱和区(saturation mode)</li></ol><p>具体情况如下<br /><img src="5.PNG" alt="5.PNG" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> mosfet </tag>
            
            <tag> 电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于树莓派4B的Openwrt系统Docker中安装Wordpress</title>
      <link href="/2022/03/25/ji_yu_shu_mei_pai_4b_de_openwrt_xi_tong_docker_zhong_an_zhuang_wordpress/ji_yu_shu_mei_pai_4b_de_openwrt_xi_tong_docker_zhong_an_zhuang_wordpress/"/>
      <url>/2022/03/25/ji_yu_shu_mei_pai_4b_de_openwrt_xi_tong_docker_zhong_an_zhuang_wordpress/ji_yu_shu_mei_pai_4b_de_openwrt_xi_tong_docker_zhong_an_zhuang_wordpress/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="确保openwrt安装了docker"><a class="markdownIt-Anchor" href="#确保openwrt安装了docker"></a> 确保OpenWrt安装了Docker</h1><p><img src="./1.png" alt="1.png" /></p><h1 id="在命令行键入以下命令以完成安装"><a class="markdownIt-Anchor" href="#在命令行键入以下命令以完成安装"></a> 在命令行键入以下命令以完成安装</h1><pre><code class="hljs sh">docker run -d --name mariadb -p 3306:3306 -e MARIADB_ROOT_PASSWORD=meimima \-e MARIADB_DATABASE=wordpress \--restart=always \mariadb:latest</code></pre><pre><code class="hljs sh">docker run -d --name wordpress -p 8083:80 -e WORDPRESS_DB_PASSWORD=meimima \-e WORDPRESS_DB_HOST=你的IP:3306 \-e WORDPRESS_DB_USER=root \-e WORDPRESS_DB_NAME=wordpress \-e WORDPRESS_TABLE_PREFIX=wp_ \--restart=always \wordpress</code></pre><p>安装完成后会有以下提示</p><p><img src="./2.png" alt="2.png" /></p><p>根据提示完成用户名密码录入</p><h1 id="修改上传文件限制"><a class="markdownIt-Anchor" href="#修改上传文件限制"></a> 修改上传文件限制</h1><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it wordpress /bin/bash</code></pre><h2 id="进入容器后"><a class="markdownIt-Anchor" href="#进入容器后"></a> 进入容器后</h2><p>安装vim</p><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak<span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;/etc/apt/sources.list</span><span class="hljs-string">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free</span><span class="hljs-string">deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span><span class="hljs-string">EOF</span>apt updateapt install vim</code></pre><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.inivim /usr/local/etc/php/php.ini</code></pre><p>搜索以下关键字</p><pre><code class="hljs vim">upload_max_filesize = <span class="hljs-number">200</span>M    #文件大小限制post_max_size = <span class="hljs-number">250</span>M    #post大小限制memory_limit = <span class="hljs-number">500</span>M        #内存占用限制</code></pre><h2 id="重启docker"><a class="markdownIt-Anchor" href="#重启docker"></a> 重启docker</h2><pre><code class="hljs sh">docker restart wordpress</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> openwrt </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smb文件共享设置</title>
      <link href="/2022/03/23/smb_wen_jian_gong_xiang_she_zhi/smb_wen_jian_gong_xiang_she_zhi/"/>
      <url>/2022/03/23/smb_wen_jian_gong_xiang_she_zhi/smb_wen_jian_gong_xiang_she_zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux服务器设置文件夹共享"><a class="markdownIt-Anchor" href="#linux服务器设置文件夹共享"></a> linux服务器设置文件夹共享</h1><p>vim /etc/samba/smb.conf</p><pre><code class="hljs conf">[Quark-Doc]    path=/home/pi/Documents/Quark-Doc    # 注意：path的值为你要共享的文件夹名称，此处我选择了根目录    # 说明信息    comment = NAS Storage    # 可以访问的用户   #  valid users = pi,root    # 可被其他人看到资源名称（非内容）    browseable = yes    # 可写    writable = yes    public = yes    # 新建文件的权限为 664    create mask = 0664    # 新建目录的权限为 775    directory mask = 0775</code></pre><p>保存后重启服务</p><pre><code class="hljs shell">sudo service smbd restart</code></pre><h1 id="window设置映射网络驱动器"><a class="markdownIt-Anchor" href="#window设置映射网络驱动器"></a> Window设置映射网络驱动器</h1><p><img src="./1.png" alt="1.png" /></p><p><img src="./2.png" alt="2.png" /></p><p>输入服务器上的密码即可，我设置的是服务器root账户密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> smb </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于树莓派4B的OpenWrt配置</title>
      <link href="/2021/11/20/ji_yu_shu_mei_pai_4b_de_openwrt_pei_zhi/ji_yu_shu_mei_pai_4b_de_openwrt_pei_zhi/"/>
      <url>/2021/11/20/ji_yu_shu_mei_pai_4b_de_openwrt_pei_zhi/ji_yu_shu_mei_pai_4b_de_openwrt_pei_zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基于树莓派-4b-的-openwrt-配置"><a class="markdownIt-Anchor" href="#基于树莓派-4b-的-openwrt-配置"></a> 基于树莓派 4B 的 OpenWrt 配置</h3><h4 id="制作这个-openwrt-的原因"><a class="markdownIt-Anchor" href="#制作这个-openwrt-的原因"></a> 制作这个 OpenWrt 的原因</h4><p>想拥有一个高度自定义的路由器，于是网上一搜，大部分都是用 OpenWrt 做的，虽然费尽周折（官方烧进去后不知道怎么连通过 ssh 访问），最终找到一个非常不错的镜像文件，就是这个链接<a target="_blank" rel="noopener" href="https://github.com/SuLingGG/OpenWrt-Rpi">Link</a>。可以到 Releases 里面去找相应的固件下载。</p><h4 id="烧录镜像"><a class="markdownIt-Anchor" href="#烧录镜像"></a> 烧录镜像</h4><p>烧录过程如下图</p><p><img src="1.png" alt="图" /><br /><img src="2.png" alt="图" /><br /><img src="3.png" alt="图" /><br /><img src="4.png" alt="图" /><br /><img src="5.png" alt="图" /></p><p>完成后将卡插入 tf 卡槽，启动树莓派</p><h3 id="调试过程"><a class="markdownIt-Anchor" href="#调试过程"></a> 调试过程</h3><h4 id="无线部分"><a class="markdownIt-Anchor" href="#无线部分"></a> 无线部分</h4><p>注意：</p><ol><li>初次启动树莓派，频宽为 5GHz,一些年纪较大的电脑可能识别不了，要把频宽换成 2.4GHz。</li><li>启动前向不用插入网线！！！</li></ol><p><img src="6.png" alt="图" /><br /><img src="7.png" alt="图" /></p><h4 id="接口设置"><a class="markdownIt-Anchor" href="#接口设置"></a> 接口设置</h4><p>最初有三个接口(因为我的修改过，所以 Lan 口会有些不一样)</p><p><img src="8.png" alt="图" /></p><p>点解 Lan 口右侧的<code>修改</code>，选择<code>物理设置</code>，去除<code>eth0</code>的勾，点击<code>保存并应用</code>。</p><p><img src="9.png" alt="图" /></p><p>点击<code>返回至概况</code>，点击<code>添加新接口</code>， 名称随便写，做个标记而已，协议选择<code>DHCP客户端</code>，勾选<code>eth0</code>，点击<code>保存并应用</code>。</p><p><img src="10.png" alt="图" /><br /><img src="11.png" alt="图" /></p><h4 id="防火墙设置"><a class="markdownIt-Anchor" href="#防火墙设置"></a> 防火墙设置</h4><p>点击防火墙设置，改变以下选择项，框内全部选择接受！！！点击<code>保存并应用</code>。</p><p><img src="12.png" alt="图" /></p><p>进入 Wan 口防火墙，修改以下值，退出时点击<code>保存并应用</code>。</p><p><img src="13.png" alt="图" /><br /><img src="14.png" alt="图" /><br /><img src="15.png" alt="图" /></p><p>切换到转发端口页面，有如下几个接口，我们需要添加两条规则</p><p><img src="16.png" alt="图" /></p><ol><li>ip 上级路由器分配给树莓派的 ip 地址，点击最右侧的<code>添加</code>，再点击<code>保存并应用</code>。<br /><img src="17.png" alt="规则一" /></li><li>第二条规则先输入和第一条规则一样，点击最右侧的<code>添加</code>，点击<code>保存并应用</code>，再点击<code>修改</code>。</li></ol><p><img src="18.png" alt="规则二" /></p><p><img src="19.png" alt="规则二" /></p><p>退出时点击<code>保存并应用</code>。</p><h4 id="完成"><a class="markdownIt-Anchor" href="#完成"></a> 完成！</h4><p>可以导出配置，以免下次折腾的时候需要重新配置！<br />后续会写如何配置其他部分。</p><p>我们可以使用 ttyd 访问终端</p><p><img src="20.png" alt="图" /></p><p>可以通过<code>opkg</code>命令安装软件，就像 Ubuntu 的<code>apt</code>，不过这里不需要加<code>sudo</code>。<br />之前尝试安装<code>nmap</code>，但是会报错，这里给出一个解决办法</p><pre><code class="hljs shell">vim /etc/openclash/config/config.yaml</code></pre><p>输入以下命令，<code>:wq</code>保存退出。</p><pre><code class="hljs shell">src/gz openwrt_nmap https://repo.turris.cz/omnia/packages/packages</code></pre><p>更新一下。</p><pre><code class="hljs shell">opkg update</code></pre><p>验证一下，输入<code>nmap -V</code></p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">root @ OpenWrt <span class="hljs-keyword">in</span> ~ [22:21:02] C:255</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">nmap -V</span>Nmap version 7.91 ( https://nmap.org )Platform: aarch64-openwrt-linux-gnuCompiled with: libz-1.2.11 libpcre-8.44 libpcap-1.10.1 nmap-libdnet-1.12 ipv6Compiled without: liblua openssl libssh2Available nsock engines: epoll poll select</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> OpenWrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装Ubuntu21.10</title>
      <link href="/2021/11/06/shu_mei_pai_an_zhuang_ubuntu21_10/shu_mei_pai_an_zhuang_ubuntu21_10/"/>
      <url>/2021/11/06/shu_mei_pai_an_zhuang_ubuntu21_10/shu_mei_pai_an_zhuang_ubuntu21_10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="树莓派安装-ubuntu2110"><a class="markdownIt-Anchor" href="#树莓派安装-ubuntu2110"></a> 树莓派安装 Ubuntu21.10</h2><h3 id="下载-安装烧录工具"><a class="markdownIt-Anchor" href="#下载-安装烧录工具"></a> 下载、安装烧录工具</h3><p>Raspberry Pi Imager：<a target="_blank" rel="noopener" href="https://www.raspberrypi.com/software/">link</a></p><p><img src="1.png" alt="1.png" /></p><p><img src="2.png" alt="1.png" /></p><h3 id="烧录过程"><a class="markdownIt-Anchor" href="#烧录过程"></a> 烧录过程</h3><h4 id="选择镜像"><a class="markdownIt-Anchor" href="#选择镜像"></a> 选择镜像</h4><p>点击<code>CHOOSE OS</code>，选择<code>Other general purpose OS</code> ，再选择 Ubuntu</p><p><img src="3.png" alt="1.png" /></p><p><img src="4.png" alt="1.png" /></p><p><img src="5.png" alt="1.png" /></p><p>找到与自己树莓派相应的版本，我的是 Raspberry 4，因此选择第一个</p><p><img src="6.png" alt="1.png" /></p><h4 id="选择-sd-卡设备"><a class="markdownIt-Anchor" href="#选择-sd-卡设备"></a> 选择 SD 卡设备</h4><p>点击<code>CHOOSE STORAGE</code> ，选择自己的 SD 卡设备</p><p><img src="7.png" alt="1.png" /></p><p><img src="8.png" alt="1.png" /></p><p>点击<code>WRITE</code></p><p><img src="9.png" alt="1.png" /></p><p>等待烧录完成，拔出 SD 卡，插入树莓派卡槽，插电源开机。至此为树莓派安装 Ubuntu 流程结束，插上显示器后效果如下</p><p><img src="10.png" alt="1.png" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI通讯协议</title>
      <link href="/2021/10/09/spi_tong_xun_xie_yi/spi_tong_xun_xie_yi/"/>
      <url>/2021/10/09/spi_tong_xun_xie_yi/spi_tong_xun_xie_yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>显示屏 TFT-LCD 信号接口有 SPI、MCU、RGB、LVDS、MIPI、eDP、HDMI 等等多种类型。其中就包括 SPI 协议，SPI 协议还有其他用途，<strong>FLASHRAM</strong>、<strong>网络控制器</strong>、<strong>LCD 显示驱动器</strong>、<strong>A/D 转换器</strong>和<strong>MCU</strong>等。</p><h2 id="spi-协议"><a class="markdownIt-Anchor" href="#spi-协议"></a> SPI 协议</h2><h3 id="通信原理"><a class="markdownIt-Anchor" href="#通信原理"></a> 通信原理</h3><p>需要至少 3 根线，分别是 SDI（数据输入）、SDO（数据输出）、SCLK（时钟）、CS（片选）</p><ol><li>SDI – SerialData In,串行数据输入</li><li>SDO – SerialDataOut,串行数据输出</li><li>SCLK – Serial Clock,时钟信号，由主设备产生</li><li>CS – Chip Select,从设备使能信号，由主设备控制</li></ol><p><strong>CS</strong>是<strong>从芯片</strong>是否被<strong>主芯片</strong>选中的控制信号，也就是说只有<strong>片选信号</strong>为预先规定的<strong>使能信号</strong>时（高电位或低电位），主芯片对此从芯片的操作<strong>才有效</strong>。这就使在同一条总线上<strong>连接多个 SPI 设备</strong>成为可能。</p><h3 id="spi-接口"><a class="markdownIt-Anchor" href="#spi-接口"></a> SPI 接口</h3><p>SPI 接口是在 CPU 和外围低速器件之间进行<strong>同步串行</strong>数据传输，在<strong>主器件</strong>的移位脉冲下，数据按位传输，<strong>高</strong>位在<strong>前</strong>，<strong>低</strong>位在<strong>后</strong>，为全双工通信，数据传输速度总体来说比<strong>I2C</strong>总线要<strong>快</strong>，速度可达到几 Mbps。</p><p>特点：信号线少，协议简单，相对数据速率高。</p><ol><li><p>MOSI – 主器件数据输出，从器件数据输入</p></li><li><p>MISO – 主器件数据输入，从器件数据输出</p></li><li><p>SCLK –时钟信号，由主器件产生,最大为 fPCLK/2，从模式频率最大为 fCPU/2</p></li><li><p>NSS – 从器件使能信号，由主器件控制,有的 IC 会标注为 CS(Chip select)</p></li></ol><p><strong>#未完待续#</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> SPI </tag>
            
            <tag> tags2 </tag>
            
            <tag> tags3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为VScode添加背景</title>
      <link href="/2021/06/27/wei_vscode_tian_jia_bei_jing/wei_vscode_tian_jia_bei_jing/"/>
      <url>/2021/06/27/wei_vscode_tian_jia_bei_jing/wei_vscode_tian_jia_bei_jing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原生的vscode无背景，没有理想的好看</p><p><img src="vscode1.png" alt="vscode1.png" /></p><p>那如何为VScode添加自己喜欢的壁纸呢？</p><p>打开VScode文件所在位置，我的安装路径是<code>C:\Users\用户名\AppData\Local\Programs\Microsoft VS Code\</code><br />再依次打开目录<code>\resources\app\out\vs\workbench</code><br />完整路径是: <code>C:\Users\用户名\AppData\Local\Programs\Microsoft VS Code\resources\app\out\vs\workbench</code><br />打开文件<code>workbench.desktop.main.css</code></p><p><img src="vscode2.png" alt="vscode2.png" /></p><p>添加如下代码</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-comment">/*背景图片的路径*/</span>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">C:/Users/用户名/123.jpg</span>);    <span class="hljs-comment">/* 图片不重复 */</span>    <span class="hljs-attribute">background-repeat</span>: no-repeat;    <span class="hljs-comment">/* 图片位置 */</span>    <span class="hljs-attribute">background-position</span>: center;    <span class="hljs-comment">/* 图片大小 */</span>    <span class="hljs-attribute">background-size</span>: cover;    <span class="hljs-comment">/* 透明度 */</span>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;    <span class="hljs-comment">/* opacity: 0.75; */</span>&#125;</code></pre><p><img src="vscode3.png" alt="vscode3.png" /></p><p><code>Ctrl + S</code>保存，重启VScode即可，效果如下。</p><p><img src="vscode4.png" alt="vscode4.png" /></p><p>可能会提示Code可能损坏，这个可以忽略，选择不再提示就可以了。</p><p><img src="vscode5.png" alt="vscode5.png" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vscode </tag>
            
            <tag> 美化 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS18B20测温芯片驱动代码</title>
      <link href="/2021/06/02/ds18b20_ce_wen_xin_pian/ds18b20_ce_wen_xin_pian_qu_dong_dai_ma/"/>
      <url>/2021/06/02/ds18b20_ce_wen_xin_pian/ds18b20_ce_wen_xin_pian_qu_dong_dai_ma/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下代码在STC15W408AS单片机进行测试，后面还有自制的PCB的原理图和layout设计（因某些原因需要制作这样一块显示温度的小项目，又想节约成本，于是画的十分简陋…）</p><h2 id="ds18b20驱动代码"><a class="markdownIt-Anchor" href="#ds18b20驱动代码"></a> DS18B20驱动代码</h2><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stc15.h&quot;</span> <span class="hljs-comment">//此处应修改为相应的单片机库</span></span>sbit DQ = P1^<span class="hljs-number">1</span>;  <span class="hljs-comment">//此处为连接DS18B20的引脚号</span><span class="hljs-comment">//单总线延时函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">Delay_OneWire</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> t)</span>  <span class="hljs-comment">//STC89C52RC</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i;<span class="hljs-keyword">while</span>(t--)&#123;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++);&#125;&#125;<span class="hljs-comment">//通过单总线向DS18B20写一个字节</span><span class="hljs-type">void</span> <span class="hljs-title function_">Write_DS18B20</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> dat)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;DQ = <span class="hljs-number">0</span>;DQ = dat&amp;<span class="hljs-number">0x01</span>;Delay_OneWire(<span class="hljs-number">5</span>);DQ = <span class="hljs-number">1</span>;dat &gt;&gt;= <span class="hljs-number">1</span>;&#125;Delay_OneWire(<span class="hljs-number">5</span>);&#125;<span class="hljs-comment">//从DS18B20读取一个字节</span><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title function_">Read_DS18B20</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> dat;  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;DQ = <span class="hljs-number">0</span>;dat &gt;&gt;= <span class="hljs-number">1</span>;DQ = <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span>(DQ)&#123;dat |= <span class="hljs-number">0x80</span>;&#125;    Delay_OneWire(<span class="hljs-number">5</span>);&#125;<span class="hljs-keyword">return</span> dat;&#125;<span class="hljs-comment">//DS18B20设备初始化</span>bit <span class="hljs-title function_">init_ds18b20</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;  bit initflag = <span class="hljs-number">0</span>;    DQ = <span class="hljs-number">1</span>;  Delay_OneWire(<span class="hljs-number">12</span>);  DQ = <span class="hljs-number">0</span>;  Delay_OneWire(<span class="hljs-number">80</span>);  DQ = <span class="hljs-number">1</span>;  Delay_OneWire(<span class="hljs-number">10</span>);     initflag = DQ;       Delay_OneWire(<span class="hljs-number">5</span>);    <span class="hljs-keyword">return</span> initflag;&#125; <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title function_">rd_temperature</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> low,high;  <span class="hljs-type">char</span> temp;    init_ds18b20();  Write_DS18B20(<span class="hljs-number">0xCC</span>);  Write_DS18B20(<span class="hljs-number">0x44</span>); <span class="hljs-comment">//启动温度转换</span>  Delay_OneWire(<span class="hljs-number">200</span>);  init_ds18b20();  Write_DS18B20(<span class="hljs-number">0xCC</span>);  Write_DS18B20(<span class="hljs-number">0xBE</span>); <span class="hljs-comment">//读取寄存器</span>  low = Read_DS18B20(); <span class="hljs-comment">//低字节</span>  high = Read_DS18B20(); <span class="hljs-comment">//高字节</span>    temp = high&lt;&lt;<span class="hljs-number">4</span>;  temp |= (low&gt;&gt;<span class="hljs-number">4</span>);    <span class="hljs-keyword">return</span> temp;&#125;</code></pre><h2 id="pcb文件及其示意图"><a class="markdownIt-Anchor" href="#pcb文件及其示意图"></a> PCB文件及其示意图</h2><p>PCB文件以压缩包形式打包。<a href="%E6%B8%A9%E6%8E%A7.rar">戳我下载</a><br />注：我画的是拼板，右侧的那块可能地线没有接到一起。</p><h3 id="pcb原件布局"><a class="markdownIt-Anchor" href="#pcb原件布局"></a> PCB原件布局</h3><p><img src="pcb.jpg" alt="pcb.jpg" /></p><h3 id="bom表"><a class="markdownIt-Anchor" href="#bom表"></a> BOM表</h3><table><thead><tr><th style="text-align:center">Comment</th><th style="text-align:center">Description</th><th style="text-align:center">Footprint</th><th style="text-align:center">Quantity</th></tr></thead><tbody><tr><td style="text-align:center">5261AS</td><td style="text-align:center">二位共阴数码管</td><td style="text-align:center">5261AS</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LED</td><td style="text-align:center">发光二极管</td><td style="text-align:center">0603</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Header 4</td><td style="text-align:center">Header, 4-Pin</td><td style="text-align:center">HDR1X4</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Res</td><td style="text-align:center">10K</td><td style="text-align:center">0603</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Res</td><td style="text-align:center">5.1R</td><td style="text-align:center">0603</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">STC15W408AS</td><td style="text-align:center">C51单片机</td><td style="text-align:center">SOP-16</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">DS18B20模组</td><td style="text-align:center">DS18B20模组</td><td style="text-align:center">DS18B20模组</td><td style="text-align:center">1</td></tr></tbody></table><p>DS18B20模组相关文件由淘宝商家提供，以下是淘宝商家公开的百度网盘连接。<br /><a target="_blank" rel="noopener" href="https://pan.baidu.com/s/19CwH6CAaWgVBMKmCA28ygQ">https://pan.baidu.com/s/19CwH6CAaWgVBMKmCA28ygQ</a> 提取码：lggj</p><h2 id="单片机代码"><a class="markdownIt-Anchor" href="#单片机代码"></a> 单片机代码</h2><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stc15.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;intrins.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;onewire.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;absacc.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> uchar unsigned char</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned int</span>sbit LED = P3 ^ <span class="hljs-number">2</span>; <span class="hljs-comment">//H有效</span>sbit DIGITAL_a = P1 ^ <span class="hljs-number">2</span>;sbit DIGITAL_b = P1 ^ <span class="hljs-number">3</span>;sbit DIGITAL_c = P1 ^ <span class="hljs-number">4</span>;sbit DIGITAL_d = P1 ^ <span class="hljs-number">5</span>;sbit DIGITAL_e = P5 ^ <span class="hljs-number">4</span>;  <span class="hljs-comment">//sbit DIGITAL_e = P2 ^ 4;</span>sbit DIGITAL_f = P5 ^ <span class="hljs-number">5</span>;  <span class="hljs-comment">//sbit DIGITAL_e = P2 ^ 5;</span>sbit DIGITAL_g = P1 ^ <span class="hljs-number">0</span>;sbit DIGITAL_dp = P3 ^ <span class="hljs-number">7</span>;sbit DIGITAL_H = P3 ^ <span class="hljs-number">6</span>;sbit DIGITAL_L = P3 ^ <span class="hljs-number">3</span>;<span class="hljs-comment">//sbit DQ = P1 ^ 1;</span>bit temper_flag = <span class="hljs-number">0</span>; <span class="hljs-comment">//温度读取标志</span><span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<span class="hljs-type">int</span> intr = <span class="hljs-number">0</span>;<span class="hljs-comment">/*数码管显示数字*/</span><span class="hljs-type">void</span> <span class="hljs-title function_">printf_num</span><span class="hljs-params">(num)</span>&#123;    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">1</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">0</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示1*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)    &#123;        DIGITAL_a = <span class="hljs-number">0</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">0</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">0</span>;        DIGITAL_g = <span class="hljs-number">0</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示2*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">2</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">0</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">1</span>;        DIGITAL_f = <span class="hljs-number">0</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示3*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">3</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">0</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示4*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">4</span>)    &#123;        DIGITAL_a = <span class="hljs-number">0</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">0</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示0*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">5</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">0</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示6*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">6</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">0</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">1</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示7*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">7</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">0</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">0</span>;        DIGITAL_g = <span class="hljs-number">0</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示8*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">8</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">1</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/*显示9*/</span>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">9</span>)    &#123;        DIGITAL_a = <span class="hljs-number">1</span>;        DIGITAL_b = <span class="hljs-number">1</span>;        DIGITAL_c = <span class="hljs-number">1</span>;        DIGITAL_d = <span class="hljs-number">1</span>;        DIGITAL_e = <span class="hljs-number">0</span>;        DIGITAL_f = <span class="hljs-number">1</span>;        DIGITAL_g = <span class="hljs-number">1</span>;        DIGITAL_dp = <span class="hljs-number">0</span>;    &#125;&#125;<span class="hljs-comment">/*数码管显示温度*/</span><span class="hljs-type">void</span> <span class="hljs-title function_">printf_wendu</span><span class="hljs-params">(num)</span>&#123;    <span class="hljs-comment">//printf_num(num/10);</span>    DIGITAL_H = <span class="hljs-number">0</span>;    printf_num(num / <span class="hljs-number">10</span>);    <span class="hljs-comment">//    DIGITAL_H = 0;</span>    DIGITAL_H = <span class="hljs-number">1</span>;    DIGITAL_a = <span class="hljs-number">0</span>;    DIGITAL_b = <span class="hljs-number">0</span>;    DIGITAL_c = <span class="hljs-number">0</span>;    DIGITAL_d = <span class="hljs-number">0</span>;    DIGITAL_e = <span class="hljs-number">0</span>;    DIGITAL_f = <span class="hljs-number">0</span>;    DIGITAL_g = <span class="hljs-number">0</span>;    DIGITAL_dp = <span class="hljs-number">0</span>;    <span class="hljs-comment">//Delay_printf_wendu();</span>    <span class="hljs-comment">//printf_num(num%10);</span>    DIGITAL_L = <span class="hljs-number">0</span>;    printf_num(num % <span class="hljs-number">10</span>);    <span class="hljs-comment">//    DIGITAL_L = 0;</span>    DIGITAL_L = <span class="hljs-number">1</span>;    DIGITAL_a = <span class="hljs-number">0</span>;    DIGITAL_b = <span class="hljs-number">0</span>;    DIGITAL_c = <span class="hljs-number">0</span>;    DIGITAL_d = <span class="hljs-number">0</span>;    DIGITAL_e = <span class="hljs-number">0</span>;    DIGITAL_f = <span class="hljs-number">0</span>;    DIGITAL_g = <span class="hljs-number">0</span>;    DIGITAL_dp = <span class="hljs-number">0</span>;    <span class="hljs-comment">//Delay_printf_wendu();</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">float</span> temperature;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        <span class="hljs-keyword">if</span> (temper_flag)        &#123;            temper_flag = <span class="hljs-number">0</span>;            temperature = rd_temperature(); <span class="hljs-comment">//读温度</span>temp = temperature;        &#125;        printf_wendu(temp);intr++;    <span class="hljs-keyword">if</span> (intr == <span class="hljs-number">100</span>) <span class="hljs-comment">//1ms执行一次</span>    &#123;        intr = <span class="hljs-number">0</span>;        temper_flag = <span class="hljs-number">1</span>; <span class="hljs-comment">//100ms温度读取标志位置1</span>    &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> DS18B20 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Valine评论添加QQ头像识别</title>
      <link href="/2021/04/26/wei_valine_ping_lun_tian_jia_qq_tou_xiang_shi_bie/wei_valine_ping_lun_tian_jia_qq_tou_xiang_shi_bie/"/>
      <url>/2021/04/26/wei_valine_ping_lun_tian_jia_qq_tou_xiang_shi_bie/wei_valine_ping_lun_tian_jia_qq_tou_xiang_shi_bie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="valine"><a class="markdownIt-Anchor" href="#valine"></a> Valine</h2><p>F12 查看源码</p><p><img src="bug_1.png" alt="bug_1.png" /></p><p>在主题文件夹查询 Valine.js 文件，如果没有 Valine 可以去这里复制下载<a target="_blank" rel="noopener" href="https://unpkg.com/valine@1.4.14/dist/Valine.min.js">link</a></p><p>打开文件 Valine.js，<code>Ctrl + F</code>查询<code>img class=&quot;vimg&quot;</code>，注意绿色框的代码，等下要修改的部分。</p><p>查到后修改</p><pre><code class="hljs js"><span class="hljs-string">&#x27;&lt;img class=&quot;vimg&quot; src=&quot;&#x27;</span> +  (T.<span class="hljs-property">cdn</span> + (<span class="hljs-number">0</span>, s.<span class="hljs-property">default</span>)(t.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;mail&quot;</span>)) + T.<span class="hljs-property">params</span>) +  <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;</code></pre><p>修改为</p><pre><code class="hljs js"><span class="hljs-string">&#x27;&lt;img class=&quot;vimg&quot; src=&quot;&#x27;</span> + qq_img + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;</code></pre><p>要添加的代码</p><pre><code class="hljs js"><span class="hljs-comment">//var qq_img = m.cdn + a(e.get(&quot;mail&quot;)) + m.params;</span><span class="hljs-keyword">var</span> qq_img = T.<span class="hljs-property">cdn</span> + (<span class="hljs-number">0</span>, s.<span class="hljs-property">default</span>)(t.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;mail&quot;</span>)) + T.<span class="hljs-property">params</span>;<span class="hljs-keyword">if</span> (t.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;mail&quot;</span>).<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;@qq.com&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;  <span class="hljs-keyword">var</span> prefix = t.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;mail&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/@.*/</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//前缀</span>  <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/^\d+$/g</span>;  <span class="hljs-comment">//正则表达式</span>  <span class="hljs-keyword">var</span> result = prefix.<span class="hljs-title function_">match</span>(pattern);<span class="hljs-comment">//match 是匹配的意思</span>  <span class="hljs-keyword">if</span> (result !== <span class="hljs-literal">null</span>) &#123;    qq_img = <span class="hljs-string">&quot;//q1.qlogo.cn/g?b=qq&amp;nk=&quot;</span> + prefix + <span class="hljs-string">&quot;&amp;s=100&quot;</span>;  &#125;&#125;</code></pre><p><img src="code_1.png" alt="code_1.png" /></p><h2 id="修改流程"><a class="markdownIt-Anchor" href="#修改流程"></a> 修改流程</h2><p>流程：</p><ol><li>默认还是gravator头像接口</li><li>判断是否是qq邮箱，提取前缀prefix</li><li>qq头像接口是qq号，如正则筛选剔除–重命名了带英文的qq邮箱</li><li>拼接头像地址</li><li>加入src显示！</li></ol><p>参考博客链接：<a href="">https://blog.csdn.net/cungudafa/article/details/104638730</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在material主题使用BBtalk</title>
      <link href="/2021/04/25/zai_material_zhu_ti_shi_yong_bbtalk/zai_material_zhu_ti_shi_yong_bbtalk/"/>
      <url>/2021/04/25/zai_material_zhu_ti_shi_yong_bbtalk/zai_material_zhu_ti_shi_yong_bbtalk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="新建bbtalk页面"><a class="markdownIt-Anchor" href="#新建bbtalk页面"></a> 新建BBtalk页面</h2><p>终端输入<code>hexo new page bb</code></p><p>打开<a target="_blank" rel="noopener" href="https://bb.js.org/quick-start.html#cdn%E5%BC%95%E7%94%A8">BBtalk</a>文档</p><p>复制<code>CDN引用</code>下方的代码</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 存放哔哔的容器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbtalk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- 引用 bbtalk --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bbtalk@0.1.5/dist/bbtalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">bbtalk.<span class="hljs-title function_">init</span>(&#123;</span><span class="language-javascript">  <span class="hljs-attr">appId</span>: <span class="hljs-string">&quot;Y5IDwC47czJFXXXXXXSlU44Y-MdYXbMMI&quot;</span>,</span><span class="language-javascript">  <span class="hljs-attr">appKey</span>: <span class="hljs-string">&quot;qgrJ3nRwXXXXXXwwnVfj0uaQ&quot;</span>,</span><span class="language-javascript">  <span class="hljs-attr">serverURLs</span>: <span class="hljs-string">&#x27;https://AppID前八位.api.lncldglobal.com&#x27;</span></span><span class="language-javascript">&#125;)</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="./Code_1.png" alt="Code_1" /></p><p>终端输入<code>hexo s</code>效果如下,圆点位置会有偏差：</p><p><img src="./test_1.png" alt="test_1" /></p><p>打开下方链接，复制js内容，在本地新建一个<code>bbtalk.min.js</code>。</p><p><a href="https://hp-l.gitee.io/phone/bb/bbtalk.min.js">https://hp-l.gitee.io/phone/bb/bbtalk.min.js</a></p><p>再将上文中的复制的<code>CDN引用</code>下方的代码 <code>https://cdn.jsdelivr.net/npm/bbtalk@0.1.5/dist/bbtalk.min.js</code> 改成 <code>./bbtalk.min.js</code></p><p>即</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 存放哔哔的容器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bbtalk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- 引用 bbtalk --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bbtalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">bbtalk.<span class="hljs-title function_">init</span>(&#123;</span><span class="language-javascript">  <span class="hljs-attr">appId</span>: <span class="hljs-string">&quot;Y5IDwC47czJFXXXXXXSlU44Y-MdYXbMMI&quot;</span>,</span><span class="language-javascript">  <span class="hljs-attr">appKey</span>: <span class="hljs-string">&quot;qgrJ3nRwXXXXXXwwnVfj0uaQ&quot;</span>,</span><span class="language-javascript">  <span class="hljs-attr">serverURLs</span>: <span class="hljs-string">&#x27;https://AppID前八位.api.lncldglobal.com&#x27;</span></span><span class="language-javascript">&#125;)</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>效果如下，还需进一步调整。</p><p><img src="./test_2.png" alt="test_2.png" /><br /><img src="test_3.jpg" alt="test_3" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> material </tag>
            
            <tag> BBtalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32点亮LED</title>
      <link href="/2021/01/31/stm32_dian_liang_led/stm32_dian_liang_led/"/>
      <url>/2021/01/31/stm32_dian_liang_led/stm32_dian_liang_led/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>点灯就相当于 python 的<code>print(&quot;hello world&quot;)</code></p><h2 id="定义引脚"><a class="markdownIt-Anchor" href="#定义引脚"></a> 定义引脚</h2><p>打开工程文件后，找到相应的引脚，单击选择<code>GPIO_Output</code>，再右键选择 Enter User Label，输入定义的名称。</p><p><img src="./LED_1.png" alt="工程" /></p><p><img src="./LED_2.png" alt="LED_2" /><br /><img src="./LED_3.png" alt="LED_3" /><br /><img src="./LED_4.png" alt="LED_4" /></p><p>点击生成代码</p><p><img src="./CODE_1.png" alt="点击生成代码" /><br /><img src="./CODE_2.png" alt="等待生成代码" /></p><p>点灯代码如下</p><pre><code class="hljs c"><span class="hljs-comment">//点灯代码    LED1闪烁</span> HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); HAL_Delay(<span class="hljs-number">300</span>);</code></pre><p>自动生成代码如下</p><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span>  <span class="hljs-comment">/* USER CODE END 1 */</span>  <span class="hljs-comment">/* MCU Configuration----------------------------------*/</span>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>  HAL_Init();  <span class="hljs-comment">/* USER CODE BEGIN Init */</span>  <span class="hljs-comment">/* USER CODE END Init */</span>  <span class="hljs-comment">/* Configure the system clock */</span>  SystemClock_Config();  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span>  <span class="hljs-comment">/* USER CODE END SysInit */</span>  <span class="hljs-comment">/* Initialize all configured peripherals */</span>  MX_GPIO_Init();  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span>  <span class="hljs-comment">/* USER CODE END 2 */</span>  <span class="hljs-comment">/* Infinite loop */</span>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)  &#123;    <span class="hljs-comment">/* USER CODE END WHILE */</span>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span>    <span class="hljs-comment">//点灯代码    LED1闪烁</span>    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);    HAL_Delay(<span class="hljs-number">300</span>);  &#125;  <span class="hljs-comment">/* USER CODE END 3 */</span>&#125;</code></pre><p>连接开发板后点击RUN图标</p><img class=".&#x2F;RUN.png, alt&#x3D;RUN"><img class=".&#x2F;successfully.png, alt&#x3D;successfully"><p>, alt=successfully %}</p>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序局域网控制ESP32（物联网芯片）</title>
      <link href="/2020/12/16/xiao_cheng_xu_kong_zhi_esp32/xiao_cheng_xu_ju_yu_wang_kong_zhi_esp32_wu_lian_wang_xin_pian/"/>
      <url>/2020/12/16/xiao_cheng_xu_kong_zhi_esp32/xiao_cheng_xu_ju_yu_wang_kong_zhi_esp32_wu_lian_wang_xin_pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="微信小程序"><a class="markdownIt-Anchor" href="#微信小程序"></a> 微信小程序</h2><!-- 代码Gitee仓库 --><p>体验版二维码。<br /><img src="https://7.dusays.com/2020/12/16/46f7f2a73970e.jpg" alt="体验版二维码" /><br />线上版二维码。</p><img class=".&#x2F;wechar.jpg, width&#x3D;200px, bg&#x3D;#f4f4f4, alt&#x3D;线上版二维码"><p><img src="./wechar.jpg" alt="jpg" /></p><p><a target="_blank" rel="noopener" href="https://gitee.com/HP-L/esp32_-we-char_-connect">https://gitee.com/HP-L/esp32_-we-char_-connect</a></p><h2 id="esp32-代码"><a class="markdownIt-Anchor" href="#esp32-代码"></a> ESP32 代码</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Timer,Pin,RTC <span class="hljs-comment">#调用GPIO口调用定时器库</span><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">from</span> emp_wifi <span class="hljs-keyword">import</span> Wifi<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> esp32<span class="hljs-keyword">import</span> usocket<span class="hljs-comment"># from machine import Pin, SPI, UART,I2C</span><span class="hljs-comment"># 爬虫使用库</span><span class="hljs-keyword">import</span> socket,re,sys,os<span class="hljs-keyword">import</span> urequests <span class="hljs-keyword">as</span> requesthea = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#x27;</span>&#125;rtc = RTC()port = <span class="hljs-number">10000</span>  <span class="hljs-comment">#端口号</span>listenSocket = <span class="hljs-literal">None</span>  <span class="hljs-comment">#套接字</span><span class="hljs-keyword">import</span> networkwifi = network.WLAN(network.STA_IF)wifi.active(<span class="hljs-literal">True</span>)A = Pin(<span class="hljs-number">17</span>, Pin.OUT, value=<span class="hljs-number">0</span>)B = Pin(<span class="hljs-number">12</span>, Pin.OUT, value=<span class="hljs-number">1</span>)C = Pin(<span class="hljs-number">14</span>, Pin.OUT, value=<span class="hljs-number">1</span>)D = Pin(<span class="hljs-number">27</span>, Pin.OUT, value=<span class="hljs-number">1</span>)E = Pin(<span class="hljs-number">26</span>, Pin.OUT, value=<span class="hljs-number">1</span>)F = Pin(<span class="hljs-number">25</span>, Pin.OUT, value=<span class="hljs-number">1</span>)G = Pin(<span class="hljs-number">33</span>, Pin.OUT, value=<span class="hljs-number">1</span>)<span class="hljs-comment"># 爬时间</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time_pa</span>():    time_api_url = <span class="hljs-string">&quot;&quot;&quot;http://quan.suning.com/getSysTime.do&quot;&quot;&quot;</span>    r = request.get(time_api_url, headers = hea)    content = r.text    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;爬取时间...&#x27;</span>)    time = re.search(        <span class="hljs-string">r&#x27;&#123;&quot;sysTime2&quot;:&quot;(.*?)-(.*?)-(.*?) (.*?):(.*?):(.*?)&quot;,&quot;sysTime1&quot;:&quot;&#x27;</span>, content        )    <span class="hljs-built_in">print</span>(r.text[<span class="hljs-number">13</span>:<span class="hljs-number">29</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>]))    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>]))    mm = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>])<span class="hljs-comment"># 分钟</span>    hh = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>])<span class="hljs-comment"># 小时</span>    rtc = RTC()    time_date = rtc.datetime()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重置时间！&#x27;</span>)    rtc.datetime((time_date[<span class="hljs-number">0</span>], time_date[<span class="hljs-number">1</span>], time_date[<span class="hljs-number">2</span>], time_date[<span class="hljs-number">3</span>], hh, mm, time_date[<span class="hljs-number">6</span>], time_date[<span class="hljs-number">7</span>]))    rtc.datetime()<span class="hljs-comment">#自动联网</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">wifi_connect</span>():  wifi_led=Pin(<span class="hljs-number">12</span>,Pin.OUT)             <span class="hljs-comment"># 板载指示灯初始化    MODE1左边</span>  wlan = network.WLAN(network.STA_IF)  <span class="hljs-comment"># 以工作站 (wlan) 模式运行，需要创建一个工作站Wi-Fi接口的实例</span>  wlan.active(<span class="hljs-literal">True</span>)                    <span class="hljs-comment"># 在工作站对象上调用激活方法并以True作为输入值传递来激活网络接口</span>  start_time=time.time()               <span class="hljs-comment"># 记录开始时间</span>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> wlan.isconnected():              <span class="hljs-comment"># 如果尚未联网成功</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前无线未联网，正在连接中....&quot;</span>)<span class="hljs-comment">#     wlan.connect(&quot;WiFi名称&quot;, &quot;密码&quot;)   # 无线网SSID、密码，开始联网</span>    wlan.connect(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)   <span class="hljs-comment"># 无线网SSID、密码，开始联网</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> wlan.isconnected():         <span class="hljs-comment"># 如果还未连接成功，则LED灯闪烁提示</span>      wifi_led.value(<span class="hljs-number">1</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)      wifi_led.value(<span class="hljs-number">1</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接到wifi....&quot;</span>)      <span class="hljs-built_in">print</span>(time.time())      <span class="hljs-keyword">if</span> time.time()-start_time&gt;<span class="hljs-number">15</span>:       <span class="hljs-comment"># 如果超过15秒还不行，就退出</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接失败!!!无线网连接超过15秒，请检查无线网名称和密码是否正确..&quot;</span>)        <span class="hljs-keyword">break</span>  <span class="hljs-keyword">if</span> wlan.isconnected():                  <span class="hljs-comment"># 如果联接成功</span>    wifi_led.value(<span class="hljs-number">1</span>)                     <span class="hljs-comment"># LED灯常亮</span>    IP_info=wlan.ifconfig()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无线网已经连接，信息如下：&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IP地址：&quot;</span>+IP_info[<span class="hljs-number">0</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子网掩码：&quot;</span>+IP_info[<span class="hljs-number">1</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网关：&quot;</span>+IP_info[<span class="hljs-number">2</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNS：&quot;</span>+IP_info[<span class="hljs-number">3</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    get_time_pa()<span class="hljs-comment"># 获取芯片温度</span><span class="hljs-comment"># def wendu():</span><span class="hljs-comment">#     f = esp32.raw_temperature()</span><span class="hljs-comment">#     c = (f-32)/1.8</span><span class="hljs-comment">#     print(c)</span><span class="hljs-comment">#     oled.text(&quot;IC:&quot; + str(int(c)),20,0)</span><span class="hljs-comment"># 远程连接传输命令函数</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_phone</span>():    <span class="hljs-keyword">try</span>:        ip = Wifi.ifconfig()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]   <span class="hljs-comment">#获取IP地址</span>        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)   <span class="hljs-comment">#设置套接字</span>        sockaddr = socket.getaddrinfo(ip, port)        <span class="hljs-built_in">print</span>(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        s.bind(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;tcp waiting...&#x27;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            data, addr = s.recvfrom(<span class="hljs-number">1024</span>)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;From %s %s&#x27;</span> % addr)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data is %s&#x27;</span> % data)            data_utf8 = <span class="hljs-built_in">bytes</span>.decode(data)            <span class="hljs-built_in">print</span>(data_utf8)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_on&quot;</span>:                B.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_on&quot;</span>:                C.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_off&quot;</span>:                B.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_off&quot;</span>:                C.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_on&quot;</span>:                D.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_on&quot;</span>:                E.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_off&quot;</span>:                D.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_off&quot;</span>:                E.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_on&quot;</span>:                F.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_on&quot;</span>:                G.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_off&quot;</span>:                F.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_off&quot;</span>:                G.value(<span class="hljs-number">1</span>)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span>(listenSocket):   <span class="hljs-comment">#判断套接字是否为空</span>            listenSocket.close()   <span class="hljs-comment">#关闭套接字</span>wifi_connect()connect_to_phone()</code></pre><p>本程序可连接 OLED1306 也可不连接 OLED1306，不会因为未连接显示屏报错。<br />可直接将 OLED1306 与 ESP32 连接，若不显示，原因可能是接线不稳，接触不良。<br />注意：本程序使用的时 I2C 通讯！！！硬件连接时，I2C必须接上高电平，下面程序是方便面包板使用者使用的程序。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Timer,Pin,RTC <span class="hljs-comment">#调用GPIO口调用定时器库</span><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">from</span> emp_wifi <span class="hljs-keyword">import</span> Wifi<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> esp32<span class="hljs-keyword">import</span> usocket<span class="hljs-comment"># 爬虫使用库</span><span class="hljs-keyword">import</span> socket,re,sys,os<span class="hljs-keyword">import</span> urequests <span class="hljs-keyword">as</span> request<span class="hljs-comment"># 显示屏使用库</span><span class="hljs-keyword">import</span> machine, ssd1306, gfxhea = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#x27;</span>&#125;rtc = RTC()port = <span class="hljs-number">10000</span>  <span class="hljs-comment">#端口号</span>listenSocket = <span class="hljs-literal">None</span>  <span class="hljs-comment">#套接字</span><span class="hljs-keyword">import</span> networkWIFI = Pin(<span class="hljs-number">17</span>, Pin.OUT, value=<span class="hljs-number">0</span>)LED_1 = Pin(<span class="hljs-number">12</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_2 = Pin(<span class="hljs-number">14</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_3 = Pin(<span class="hljs-number">27</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_4 = Pin(<span class="hljs-number">26</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_5 = Pin(<span class="hljs-number">25</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_6 = Pin(<span class="hljs-number">33</span>, Pin.OUT, value=<span class="hljs-number">1</span>)LED_7 = Pin(<span class="hljs-number">32</span>, Pin.OUT, value=<span class="hljs-number">1</span>)L3 = Pin(<span class="hljs-number">13</span>, Pin.OUT, value=<span class="hljs-number">1</span>)<span class="hljs-comment"># 爬时间</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time_pa</span>():    time_api_url = <span class="hljs-string">&quot;&quot;&quot;http://quan.suning.com/getSysTime.do&quot;&quot;&quot;</span>    r = request.get(time_api_url, headers = hea)    content = r.text    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;爬取时间...&#x27;</span>)    time = re.search(        <span class="hljs-string">r&#x27;&#123;&quot;sysTime2&quot;:&quot;(.*?)-(.*?)-(.*?) (.*?):(.*?):(.*?)&quot;,&quot;sysTime1&quot;:&quot;&#x27;</span>, content        )    <span class="hljs-built_in">print</span>(r.text[<span class="hljs-number">13</span>:<span class="hljs-number">29</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>]))    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>]))    mm = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>])<span class="hljs-comment"># 分钟</span>    hh = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>])<span class="hljs-comment"># 小时</span>    rtc = RTC()    time_date = rtc.datetime()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重置时间！&#x27;</span>)    rtc.datetime((time_date[<span class="hljs-number">0</span>], time_date[<span class="hljs-number">1</span>], time_date[<span class="hljs-number">2</span>], time_date[<span class="hljs-number">3</span>], hh, mm, time_date[<span class="hljs-number">6</span>], time_date[<span class="hljs-number">7</span>]))    rtc.datetime()<span class="hljs-comment">#自动联网</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">wifi_connect</span>():  wifi_led=Pin(<span class="hljs-number">23</span>,Pin.OUT)             <span class="hljs-comment"># 板载指示灯初始化    MODE1左边</span>  wlan = network.WLAN(network.STA_IF)  <span class="hljs-comment"># 以工作站 (wlan) 模式运行，需要创建一个工作站Wi-Fi接口的实例</span>  wlan.active(<span class="hljs-literal">True</span>)                    <span class="hljs-comment"># 在工作站对象上调用激活方法并以True作为输入值传递来激活网络接口</span>  start_time=time.time()               <span class="hljs-comment"># 记录开始时间</span>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> wlan.isconnected():              <span class="hljs-comment"># 如果尚未联网成功</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前无线未联网，正在连接中....&quot;</span>)    wlan.connect(<span class="hljs-string">&#x27;***&#x27;</span>,<span class="hljs-string">&#x27;***&#x27;</span>)   <span class="hljs-comment"># 无线网SSID、密码，开始联网</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> wlan.isconnected():         <span class="hljs-comment"># 如果还未连接成功，则LED灯闪烁提示</span>      wifi_led.value(<span class="hljs-number">0</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)      wifi_led.value(<span class="hljs-number">0</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接到wifi....&quot;</span>)      <span class="hljs-built_in">print</span>(time.time())      <span class="hljs-keyword">if</span> time.time()-start_time&gt;<span class="hljs-number">15</span>:       <span class="hljs-comment"># 如果超过15秒还不行，就退出</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接失败!!!无线网连接超过15秒，请检查无线网名称和密码是否正确..&quot;</span>)        <span class="hljs-keyword">break</span>  <span class="hljs-keyword">if</span> wlan.isconnected():                  <span class="hljs-comment"># 如果联接成功</span>    wifi_led.value(<span class="hljs-number">0</span>)                     <span class="hljs-comment"># LED灯常亮</span>    IP_info=wlan.ifconfig()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无线网已经连接，信息如下：&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IP地址：&quot;</span>+IP_info[<span class="hljs-number">0</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子网掩码：&quot;</span>+IP_info[<span class="hljs-number">1</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网关：&quot;</span>+IP_info[<span class="hljs-number">2</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNS：&quot;</span>+IP_info[<span class="hljs-number">3</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)<span class="hljs-comment">#     get_time_pa()</span>oled_str1=<span class="hljs-string">&#x27;&#x27;</span>oled_str2=<span class="hljs-string">&#x27;&#x27;</span>oled_str3=<span class="hljs-string">&#x27;&#x27;</span>oled_str4=<span class="hljs-string">&#x27;&#x27;</span>oled_str5=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">oled_process</span>(<span class="hljs-params">str1,ip,oled,graphics</span>):<span class="hljs-comment">#     i2c = machine.I2C(scl=machine.Pin(18), sda=machine.Pin(19))</span><span class="hljs-comment">#     oled = ssd1306.SSD1306_I2C(128 ,64 ,i2c)</span><span class="hljs-comment">#     graphics = gfx.GFX(128, 64, oled.pixel)</span>    <span class="hljs-keyword">global</span> oled_str1    <span class="hljs-keyword">global</span> oled_str2    <span class="hljs-keyword">global</span> oled_str3    <span class="hljs-keyword">global</span> oled_str4    <span class="hljs-keyword">global</span> oled_str5    oled_str1=oled_str2    oled_str2=oled_str3    oled_str3=oled_str4    oled_str4=oled_str5    oled_str5=str1    oled.fill(<span class="hljs-number">0</span>)    graphics._slow_vline(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">1</span>)    graphics._slow_vline(<span class="hljs-number">127</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">1</span>)    graphics._slow_hline(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">128</span>, <span class="hljs-number">1</span>)    graphics._slow_hline(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">128</span>, <span class="hljs-number">1</span>)    graphics._slow_hline(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">1</span>)    graphics._slow_hline(<span class="hljs-number">0</span>, <span class="hljs-number">63</span>, <span class="hljs-number">128</span>, <span class="hljs-number">1</span>)    oled.text(<span class="hljs-string">&quot;port:10000 &amp; ip&quot;</span>,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)    oled.text(ip,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">8</span>)    oled.text(oled_str5,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">16</span>+<span class="hljs-number">2</span>)    oled.text(oled_str4,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">24</span>+<span class="hljs-number">2</span>)    oled.text(oled_str3,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">32</span>+<span class="hljs-number">2</span>)    oled.text(oled_str2,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">40</span>+<span class="hljs-number">2</span>)    oled.text(oled_str1,<span class="hljs-number">0</span>+<span class="hljs-number">2</span>,<span class="hljs-number">48</span>+<span class="hljs-number">2</span>)    oled.show()<span class="hljs-comment"># 显示屏代码</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">oled_try</span>():    <span class="hljs-keyword">try</span>:        i2c = machine.I2C(scl=machine.Pin(<span class="hljs-number">18</span>), sda=machine.Pin(<span class="hljs-number">19</span>))        oled = ssd1306.SSD1306_I2C(<span class="hljs-number">128</span> ,<span class="hljs-number">64</span> ,i2c)        graphics = gfx.GFX(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, oled.pixel)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get&quot;</span>)        connect_to_phone_oled(oled,graphics)    <span class="hljs-keyword">except</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;false&quot;</span>)        connect_to_phone()<span class="hljs-comment"># 获取芯片温度</span><span class="hljs-comment"># def wendu():</span><span class="hljs-comment">#     f = esp32.raw_temperature()</span><span class="hljs-comment">#     c = (f-32)/1.8</span><span class="hljs-comment">#     print(c)</span><span class="hljs-comment">#     oled.text(&quot;IC:&quot; + str(int(c)),20,0)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_phone_oled</span>(<span class="hljs-params">oled,graphics</span>):    <span class="hljs-keyword">try</span>:        ip = Wifi.ifconfig()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]   <span class="hljs-comment">#获取IP地址</span>        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)   <span class="hljs-comment">#设置套接字</span>        sockaddr = socket.getaddrinfo(ip, port)        <span class="hljs-built_in">print</span>(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        s.bind(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        oled_process(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>][<span class="hljs-number">0</span>],sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>][<span class="hljs-number">0</span>],oled,graphics)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oled&quot;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;tcp waiting...&#x27;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            data, addr = s.recvfrom(<span class="hljs-number">1024</span>)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;From %s %s&#x27;</span> % addr)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data is %s&#x27;</span> % data)            data_utf8 = <span class="hljs-built_in">bytes</span>.decode(data)            oled_process(data_utf8,sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>][<span class="hljs-number">0</span>],oled,graphics)            data_size = s.sendto(data, addr)    <span class="hljs-comment">#             print(&#x27;From %s %s&#x27; % data_utf8)</span>    <span class="hljs-comment">#             print(&#x27;data is %s&#x27; % data_utf8)</span>            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_on&quot;</span>:                LED_1.value(<span class="hljs-number">0</span>)<span class="hljs-comment">#                 data_size = s.sendto(&quot;led_1_on&quot;, addr)</span>            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_on&quot;</span>:                LED_2.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_off&quot;</span>:                LED_1.value(<span class="hljs-number">1</span>)<span class="hljs-comment">#                 data_size = s.sendto(&quot;led_1_off&quot;, addr)</span>            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_off&quot;</span>:                LED_2.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_on&quot;</span>:                LED_3.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_on&quot;</span>:                LED_4.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_off&quot;</span>:                LED_3.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_off&quot;</span>:                LED_4.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_on&quot;</span>:                LED_5.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_on&quot;</span>:                LED_6.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_off&quot;</span>:                LED_5.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_off&quot;</span>:                LED_6.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_7_on&quot;</span>:                LED_7.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_7_off&quot;</span>:                LED_7.value(<span class="hljs-number">1</span>)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span>(listenSocket):   <span class="hljs-comment">#判断套接字是否为空</span>            listenSocket.close()   <span class="hljs-comment">#关闭套接字</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_phone</span>():    <span class="hljs-keyword">try</span>:        ip = Wifi.ifconfig()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]   <span class="hljs-comment">#获取IP地址</span>        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)   <span class="hljs-comment">#设置套接字</span>        sockaddr = socket.getaddrinfo(ip, port)        <span class="hljs-built_in">print</span>(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        s.bind(sockaddr[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>])        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;tcp waiting...&#x27;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            data, addr = s.recvfrom(<span class="hljs-number">1024</span>)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;From %s %s&#x27;</span> % addr)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data is %s&#x27;</span> % data)            data_utf8 = <span class="hljs-built_in">bytes</span>.decode(data)<span class="hljs-comment">#             print(&#x27;From %s %s&#x27; % data_utf8)</span><span class="hljs-comment">#             print(&#x27;data is %s&#x27; % data_utf8)</span>            data_size = s.sendto(data, addr)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_on&quot;</span>:                LED_1.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_on&quot;</span>:                LED_2.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_1_off&quot;</span>:                LED_1.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_2_off&quot;</span>:                LED_2.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_on&quot;</span>:                LED_3.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_on&quot;</span>:                LED_4.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_3_off&quot;</span>:                LED_3.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_4_off&quot;</span>:                LED_4.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_on&quot;</span>:                LED_5.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_on&quot;</span>:                LED_6.value(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_5_off&quot;</span>:                LED_5.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_6_off&quot;</span>:                LED_6.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_7_on&quot;</span>:                LED_7.value(<span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> data_utf8 == <span class="hljs-string">&quot;led_7_off&quot;</span>:                LED_7.value(<span class="hljs-number">1</span>)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span>(listenSocket):   <span class="hljs-comment">#判断套接字是否为空</span>            listenSocket.close()   <span class="hljs-comment">#关闭套接字</span>wifi_connect()oled_try()</code></pre><h2 id="测试视屏"><a class="markdownIt-Anchor" href="#测试视屏"></a> 测试视屏</h2><iframe height=520 width=776  src="//player.bilibili.com/player.html?aid=798143285&bvid=BV1Ay4y1D7T9&cid=269108454&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="max-width: 100%, text-align: center" > </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> 物联网 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记</title>
      <link href="/2020/12/12/wei_xin_xiao_cheng_xu_1/wei_xin_xiao_cheng_xu_xue_xi_bi_ji/"/>
      <url>/2020/12/12/wei_xin_xiao_cheng_xu_1/wei_xin_xiao_cheng_xu_xue_xi_bi_ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开发文档链接"><a class="markdownIt-Anchor" href="#开发文档链接"></a> 开发文档链接</h2><p><a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档</a></p><h2 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h2><p>全局文件：</p><ul><li>app.js 全局 js 文件：js 代码全局可以调用</li><li>app.json 全局配置文件：导航栏，背景颜色，标题，窗口配置</li><li>app.wxss 全局样式文件：统一样式</li><li>utils 文件夹：封装自定义的工具</li><li>pages 小程序页面文件夹：所有的页面都在该文件夹下管理，pages 文件夹中，一个文件夹代表一个页面。</li></ul><p>局部文件：一个页面的文件</p><ul><li>wxml</li><li>wxss</li><li>js</li><li>json</li></ul><h3 id="appjson"><a class="markdownIt-Anchor" href="#appjson"></a> app.json</h3><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;pages/logs/logs&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//页面管理</span>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-comment">//窗口界面</span>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//导航栏颜色</span>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Weixin&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;black&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v2&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;sitemapLocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre><p>若要添加页面或者直接在<code>&quot;pages&quot;: [&quot;pages/index/index&quot;, &quot;pages/logs/logs&quot;]</code>中添加，IDE 会直接生成一个文件夹及内部页面文件。</p><p>若在全局配置中窗口界面配置了<code>&quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;</code>的同时，在单个页面(例如 logo 页面)的配置文件也配置了<code>&quot;navigationBarBackgroundColor&quot;: &quot;#000&quot;</code>，这是只有当跳转到(例如 logo 页面)时，导航栏颜色才会变成#000。</p><h3 id="微信小程序中的-js"><a class="markdownIt-Anchor" href="#微信小程序中的-js"></a> 微信小程序中的 js</h3><h4 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h4><p>js 变量：用于储存信息的容器<br />声明时使用 var+变量名，变量类型通过赋值来决定<br />注意：变量必须一字母开头，也可以$和_开头，大小写敏感</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> answer = <span class="hljs-string">&quot;It&#x27;s alright&quot;</span>;<span class="hljs-keyword">var</span> x1 = <span class="hljs-number">43.0</span>;<span class="hljs-keyword">var</span> x = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Saab&quot;</span>;<span class="hljs-keyword">var</span> cars = [<span class="hljs-string">&quot;saab&quot;</span>, <span class="hljs-string">&quot;Volor&quot;</span>];<span class="hljs-keyword">var</span> person = <span class="hljs-literal">null</span>; <span class="hljs-comment">//清空变量内容</span><span class="hljs-keyword">var</span> carname; <span class="hljs-comment">//执行后内容为undefined</span></code></pre><h4 id="对象"><a class="markdownIt-Anchor" href="#对象"></a> 对象</h4><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;  <span class="hljs-attr">firstname</span>: <span class="hljs-string">&quot;John&quot;</span>,  <span class="hljs-attr">lastname</span>: <span class="hljs-string">&quot;Doe&quot;</span>,  <span class="hljs-attr">id</span>: <span class="hljs-number">5566</span>,&#125;;</code></pre><p>对象寻址方式</p><pre><code class="hljs js">name = person.<span class="hljs-property">lastname</span>;name = person[<span class="hljs-string">&quot;lastname&quot;</span>];</code></pre><h4 id="运算"><a class="markdownIt-Anchor" href="#运算"></a> 运算</h4><p><code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code><br />比较运算符，返回值均为<code>FALSE</code>&amp;<code>TRUE</code><br /><img src="" alt="比较运算符" /></p><p>逻辑运算符<br /><code>&amp;&amp;</code>,<code>||</code>,<code>！</code></p><pre><code class="hljs js">y = <span class="hljs-number">5</span>;z = <span class="hljs-number">2</span>;x = y + z;txt1 = <span class="hljs-string">&quot;what a very&quot;</span>;txt2 = <span class="hljs-string">&quot;nice day&quot;</span>;txt3 = txt1 + txt2; <span class="hljs-comment">//此时txt3 = &quot;what a verynice day&quot;</span></code></pre><h4 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件</h4><h5 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h5><pre><code class="hljs js"><span class="hljs-keyword">if</span> (condition) &#123;  <span class="hljs-comment">//当condition为true时，才执行下面语句</span>&#125;<span class="hljs-keyword">if</span> (condition) &#123;  <span class="hljs-comment">//当condition为true时，才执行下面语句</span>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//否则执行下面代码</span>&#125;<span class="hljs-keyword">if</span> (condition) &#123;  <span class="hljs-comment">//当condition为true时，才执行下面语句</span>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition1) &#123;  <span class="hljs-comment">//否则执行下面代码</span>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//否则执行下面代码</span>&#125;</code></pre><h4 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h4><h5 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h5><pre><code class="hljs js"><span class="hljs-keyword">for</span> (语句<span class="hljs-number">1</span>; 语句<span class="hljs-number">2</span>; 语句<span class="hljs-number">3</span>) &#123;  <span class="hljs-comment">//被执行的代码，语法和C语言相似</span>&#125;<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  x = x + <span class="hljs-number">1</span>;&#125;</code></pre><h4 id="小程序中自动生成的-js-代码"><a class="markdownIt-Anchor" href="#小程序中自动生成的-js-代码"></a> 小程序中自动生成的 js 代码</h4><pre><code class="hljs js"><span class="hljs-comment">// pages/index/index.js</span><span class="hljs-title class_">Page</span>(&#123;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 页面的初始数据</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">data</span>: &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onReady</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onShow</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onHide</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onUnload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onPullDownRefresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 用户点击右上角分享</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">onShareAppMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,&#125;);</code></pre><h5 id="page"><a class="markdownIt-Anchor" href="#page"></a> page</h5><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;  <span class="hljs-comment">//页面内容，不写任何东西也不会报错</span>&#125;);</code></pre><h6 id="data-和函数"><a class="markdownIt-Anchor" href="#data-和函数"></a> data 和函数</h6><p>data 对象</p><pre><code class="hljs js"><span class="hljs-attr">data</span>:&#123;  <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello!&#x27;</span>,  <span class="hljs-attr">flag</span>:<span class="hljs-literal">false</span>&#125;</code></pre><p>function 函数</p><pre><code class="hljs js"><span class="hljs-keyword">function</span>(<span class="hljs-params">参数</span>)&#123;  <span class="hljs-comment">//函数内容</span>&#125;,</code></pre><h5 id="小程序的生命周期和回掉函数"><a class="markdownIt-Anchor" href="#小程序的生命周期和回掉函数"></a> 小程序的生命周期和回掉函数</h5><pre><code class="hljs gherkin">加载 |<span class="hljs-string"></span><span class="hljs-string">渲染</span><span class="hljs-string"> </span>|显示----&gt;隐藏 |<span class="hljs-string">       </span>| |<span class="hljs-string">       </span>|卸载<span class="hljs-variable">&lt;----隐藏</span></code></pre><p>当程序运行到各个生命周期函数的节点时，会执行生命周期回调函数</p><p>回掉函数：</p><ul><li>onLoad() 页面加载时触发</li><li>onShow() 页面显示/切入前台触发</li><li>onReady() 页面初次渲染完成时触发<br />运行完上面流程即进入激活状态</li><li>onShow() 页面显示/切入前台触发</li><li>onHide() 页面影藏/切入后台触发</li><li>onUnload() 页面卸载时触发</li><li>onPullDownRefresh() 下拉刷新</li><li>onReachBottom()上拉触底事件</li><li>onShareAppMessage() 转发按钮，自定义转发内容</li></ul><h5 id="事件响应"><a class="markdownIt-Anchor" href="#事件响应"></a> 事件响应</h5><p>事件：视图层到逻辑层的通讯方式，将用户的行为反馈到逻辑层<br />即事件可以通过在 wxml 中绑定在组件上，达到触发条件时，会触发相应的事件处理函数(事件响应)对象可以额外携带如 id,dataset 等额外信息</p><p>组建事件响应：</p><ol><li><p>组件上绑定事件处理函数<br />点击事件绑定处理函数的方法：使用<code>bindtap</code>属性，属性值为 js 中的事件的事件处理函数的函数名</p><pre><code class="hljs js">&lt;view id=<span class="hljs-string">&quot;tapTest&quot;</span> data-hi=<span class="hljs-string">&quot;WeChat&quot;</span> bindtab=<span class="hljs-string">&quot;tapName&quot;</span>&gt;  <span class="hljs-title class_">Click</span> me!&lt;/view&gt;</code></pre></li><li><p>Page 中写相应函数处理事件，单数是 event，函数名要和 wxml 中绑定的 bindtap 属性属性值一致</p><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;  <span class="hljs-title function_">tapName</span>(<span class="hljs-params">event</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event); <span class="hljs-comment">//该语句将获取到的数据打印在了编译器的窗口中</span>  &#125;,&#125;);</code></pre></li></ol><h5 id="小程序-js-数据处理"><a class="markdownIt-Anchor" href="#小程序-js-数据处理"></a> 小程序 js 数据处理</h5><h6 id="this-关键字"><a class="markdownIt-Anchor" href="#this-关键字"></a> this 关键字</h6><p>this：当前对象的一个引用，在使用时往往指向的是上一层对象，在函数中执行时指向的是全局对象</p><p>访问页面数据：this.data 页面初始数据的那部分<br />调用页面内的函数：this.onload() 执行这一语句就会执行 onload()函数</p><p>tips: 若在 API 中使用 this，需要在调用 API 前暂存指向页面的 this，例</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;</code></pre><p>调用方法</p><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;  <span class="hljs-attr">data</span>:&#123;    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,    <span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;balabala&#x27;</span>,    <span class="hljs-attr">c</span>:[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,]  &#125;,  <span class="hljs-attr">action</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">a</span>=<span class="hljs-number">666</span>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是新的函数&quot;</span>)  &#125;,  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>)<span class="hljs-comment">//调时窗口打印出data中的所有值</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">action</span>()<span class="hljs-comment">//调用action函数</span>  &#125;&#125;)</code></pre><h6 id="页面数据更新"><a class="markdownIt-Anchor" href="#页面数据更新"></a> 页面数据更新</h6><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;  <span class="hljs-comment">//变量名：新的值，</span>  <span class="hljs-comment">//变量名：新的值，</span>  <span class="hljs-comment">//变量名：新的值</span>  <span class="hljs-attr">a</span>: <span class="hljs-number">8888</span>,&#125;);</code></pre><h6 id="不同页面的数据出传递"><a class="markdownIt-Anchor" href="#不同页面的数据出传递"></a> 不同页面的数据出传递</h6><p>方法有二，其一，页面跳转过程中携带参数。其二，将数据存于全局数据中，各个页面在从全局中读取</p><p>第二种用法：在 app.js 中</p><pre><code class="hljs js"><span class="hljs-title class_">App</span>(&#123;  <span class="hljs-attr">globalData</span>: &#123;    <span class="hljs-comment">//globalData可以改成其他名称</span>    <span class="hljs-attr">userInfo</span>: <span class="hljs-literal">null</span>,  &#125;,&#125;);</code></pre><p>各个页面与全局数据进行交互，使用<code>getApp()</code>历程如下:</p><p>页面的 js 文件如下</p><pre><code class="hljs js"><span class="hljs-attr">onLoad</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">abc</span>)  <span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">abc</span> = <span class="hljs-number">456</span>&#125;</code></pre><p>app.js 文件中含有如下</p><pre><code class="hljs js"><span class="hljs-title class_">App</span>(&#123;  <span class="hljs-attr">globalData</span>: &#123;    <span class="hljs-comment">//globalData可以改成其他名称</span>    <span class="hljs-attr">userInfo</span>: <span class="hljs-literal">null</span>,    <span class="hljs-attr">abc</span>: <span class="hljs-number">1234</span>,    <span class="hljs-attr">d</span>: [],  &#125;,&#125;);</code></pre><h3 id="微信小程序的-api-介绍"><a class="markdownIt-Anchor" href="#微信小程序的-api-介绍"></a> 微信小程序的 API 介绍</h3><p>API 的类型：</p><ul><li>事件监听 API：以 on 开头用于监听</li><li>同步 API：以 Sync 结尾的 API 都是同步 API，起执行结果可通过函数返回值直接获取。当执行到 API 时，停止组件进程等待 API 执行完。</li><li>异步 API：都接受一个 object 类型的参数。程序会启动一个分支来运行 API</li></ul><h4 id="api-内容"><a class="markdownIt-Anchor" href="#api-内容"></a> API 内容</h4><ul><li>success 部分：接口调用成功的回调函数</li><li>fail 部分：接口调用失败的回调函数</li><li>complete 部分：接口调用结束的回调函数</li></ul><p>微信登陆 API</p><pre><code class="hljs js">wx.<span class="hljs-title function_">login</span>(&#123;  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;    <span class="hljs-comment">//成功执行</span>  &#125;,  <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">errMsg</span>);    <span class="hljs-comment">//失败执行</span>  &#125;,  <span class="hljs-title function_">complete</span>(<span class="hljs-params">res</span>) &#123;    <span class="hljs-comment">//一定执行</span>  &#125;,&#125;);</code></pre><p>Object 类型参数包含的字段</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>errMsg</td><td>string</td><td>错误信息，若成功为</td></tr><tr><td>errCode</td><td>number</td><td>错误码，成功时为 0</td></tr><tr><td>其他</td><td>Any</td><td>接口返回数据</td></tr></tbody></table><h4 id="调用-api-进行页面互交"><a class="markdownIt-Anchor" href="#调用-api-进行页面互交"></a> 调用 API 进行页面互交</h4><ol><li>消息提示框</li></ol><pre><code class="hljs js">wx.<span class="hljs-title function_">showToast</span>(&#123;  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;成功&quot;</span>, <span class="hljs-comment">//文字</span>  <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-comment">//对勾</span>  <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>, <span class="hljs-comment">//延时时间</span>&#125;);</code></pre><ol start="2"><li>模态弹窗</li></ol><pre><code class="hljs js">wx.<span class="hljs-title function_">showModal</span>(&#123;  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;提示&quot;</span>,  <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;这是一个模态弹窗&quot;</span>,  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">confirm</span>) &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;用户点击确定&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">cancel</span>) &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;用户点击取消&quot;</span>);    &#125;  &#125;,&#125;);</code></pre><ol start="3"><li>Loading 提示框</li></ol><pre><code class="hljs js">wx.<span class="hljs-title function_">showLoading</span>(&#123;  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;加载中&quot;</span>,&#125;);<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  wx.<span class="hljs-title function_">hideLoading</span>(); <span class="hljs-comment">//必须调用hideLoading才能关闭loading</span>&#125;, <span class="hljs-number">2000</span>);</code></pre><ol start="4"><li>页面路由 API</li></ol><ul><li><code>wx.relaunch()</code>关闭所有页面，打开到指定页面</li><li><code>wx.redirectTo()</code>关闭当前页面，跳转到指定页面</li><li><code>wx.navigateTo()</code>保留当前页面，跳转到指定页面</li><li><code>wx.navigateBack()</code>关闭当前页面，返回上一级或多级页面</li></ul><pre><code class="hljs js">wx.<span class="hljs-title function_">relaunch</span>(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/pages/jsjs/jsjs&quot;</span>,&#125;);wx.<span class="hljs-title function_">redirectTo</span>(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;../jsjs/jsjs&quot;</span>,&#125;);wx.<span class="hljs-title function_">navigateTo</span>(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/pages/jsjs/jsjs&quot;</span>,&#125;);wx.<span class="hljs-title function_">navigateBack</span>(&#123;  <span class="hljs-attr">delta</span>: <span class="hljs-number">1</span>,&#125;);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32_物联网那些事</title>
      <link href="/2020/12/03/esp32_wu_lian_wang_na_xie_shi/esp32_wu_lian_wang_na_xie_shi/"/>
      <url>/2020/12/03/esp32_wu_lian_wang_na_xie_shi/esp32_wu_lian_wang_na_xie_shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="esp32_物联网那些事"><a class="markdownIt-Anchor" href="#esp32_物联网那些事"></a> ESP32_物联网那些事</h2><p>通过查阅资料，ESP32 是一款物联网模块，它支持 TCP/IP 协议，于是我们可以使用 socket 通讯，实现局域网通信，它也支持 MQTT 通讯，呵远程连接到阿里云。下面的链接有详细的使用说明。</p><p><a target="_blank" rel="noopener" href="http://www.1zlab.com/wiki/micropython-esp32/sockets/">Socket 通信</a></p><h2 id="使用物联网第一步烧录固件"><a class="markdownIt-Anchor" href="#使用物联网第一步烧录固件"></a> 使用物联网第一步：烧录固件</h2><p>这里提到的固件是micropython官方出的固件，我在网上还看到了不少通过C语言写.bin固件的教程，可以写自己需要的固件刷入到ESP32中</p><p>可以参考这篇文章</p><p><a href="https://hp-l.gitee.io/2020/11/05/ESP32-micropython%E5%9B%BA%E4%BB%B6%E7%83%A7%E5%BD%95/esp32-micropython%E5%9B%BA%E4%BB%B6%E7%83%A7%E5%BD%95/?t=1606983183242">ESP32_micropython固件烧录</a></p><h2 id="如何连接到-wifi"><a class="markdownIt-Anchor" href="#如何连接到-wifi"></a> 如何连接到 WiFi？</h2><p><a href="https://hp-l.gitee.io/2020/11/09/micropython%E8%81%94%E7%BD%91%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/micropython%E8%81%94%E7%BD%91%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/?t=1606983747012">Micropython联网同步时间</a></p><p>ESP32 是可以使用 REPL 的，REPL 就像局域网下的 VSCode，可以在浏览器上编写程序，可惜他不能开机自启，于是就有人开发了一款叫做 EMP 的 IDE ，下面有链接。</p><p><a target="_blank" rel="noopener" href="http://www.1zlab.com/wiki/micropython-esp32/emp-project/">EMP项目简介</a></p><p>我在执行原文提供的代码时发现<code>set_boot_mode()</code>报错</p><p>原文提供的代码</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> emp_boot <span class="hljs-keyword">import</span> set_boot_mode<span class="hljs-meta">&gt;&gt;&gt; </span>set_boot_mode()<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> emp_boot <span class="hljs-keyword">import</span> set_boot_mode<span class="hljs-meta">&gt;&gt;&gt; </span>set_boot_mode()[<span class="hljs-number">0</span>]  Boot <span class="hljs-keyword">with</span> nothing     attention: this option will clear up boot.py, careful![<span class="hljs-number">1</span>]  Boot <span class="hljs-keyword">with</span> wifi startup       this mode will auto start wifi connect program.[<span class="hljs-number">2</span>]  Easy to develop     this mode <span class="hljs-keyword">is</span> <span class="hljs-keyword">for</span> developers.In this mode you can develop much easier via EMP-         IDE(emp<span class="hljs-number">.1</span>zlab.com)Please <span class="hljs-built_in">input</span> your choice [<span class="hljs-number">0</span>-<span class="hljs-number">2</span>]:</code></pre><p>下面给出解决方案：</p><p>在 ESP32 的 <a target="_blank" rel="noopener" href="http://boot.py">boot.py</a> 中所有代码替换成如下代码：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> emp_wifi <span class="hljs-keyword">import</span> Wifi<span class="hljs-keyword">from</span> emp_webrepl <span class="hljs-keyword">import</span> WebREPL<span class="hljs-keyword">from</span> emp_utils <span class="hljs-keyword">import</span> webrepl_pass<span class="hljs-keyword">from</span> emp_utils <span class="hljs-keyword">import</span> post_ip<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin <span class="hljs-comment"># 引用LED使用</span><span class="hljs-keyword">import</span> timewifi_LED = Pin(<span class="hljs-number">12</span>, Pin.OUT, value=<span class="hljs-number">1</span>) <span class="hljs-comment">#定义LED</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    Wifi.connect()    post_ip(Wifi.ifconfig()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])    wifi_LED.value(<span class="hljs-number">0</span>)    time.sleep(<span class="hljs-number">0.5</span>)    wifi_LED.value(<span class="hljs-number">1</span>)<span class="hljs-comment">#     WebREPL.start(password=webrepl_pass())</span><span class="hljs-comment">#     from emp_ide import *</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">上面两行是调用emp_ide，取消注释就可以使用emp_ide，</span><span class="hljs-string">这里注释掉的原因是想直接调用连接WiFi的函数不使用emp_ide</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>在按复位即可，终端中会提示连接网络并且输入密码，连接过的 WiFi 会被记住，下次连接自动连，非常方便</p><h2 id="利用-esp32-联网实现一些小功能"><a class="markdownIt-Anchor" href="#利用-esp32-联网实现一些小功能"></a> 利用 ESP32 联网实现一些小功能</h2><p>我们可以通过 socket 通讯使得 PC 可以传输数据流到 ESP32 中，下面是代码，这里仿照的是<a target="_blank" rel="noopener" href="http://www.1zlab.com/wiki/micropython-esp32/sockets/">Socket 通信</a>文末的代码，原文中代码只能传输字节，下面代码可以传输中文字符，通过定义 IO 口可以实现局域网点亮 LED，甚至舵机。</p><h3 id="esp32-tcp-服务端"><a class="markdownIt-Anchor" href="#esp32-tcp-服务端"></a> ESP32 TCP 服务端</h3><pre><code class="hljs python"><span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Timer,Pin,RTC <span class="hljs-comment">#调用GPIO口调用定时器库</span><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">from</span> emp_wifi <span class="hljs-keyword">import</span> Wifi<span class="hljs-keyword">import</span> networkwifi = network.WLAN(network.STA_IF)wifi.active(<span class="hljs-literal">True</span>)<span class="hljs-comment"># 远程连接传输命令函数</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_phone</span>():    <span class="hljs-keyword">try</span>:        <span class="hljs-comment"># 注意：线连接到WiFi网络！</span>        <span class="hljs-comment"># 如果未连接到网络，以下是连接到网络的代码</span>        <span class="hljs-comment"># Wifi.connect()</span>        ip = Wifi.ifconfig()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]   <span class="hljs-comment">#获取IP地址</span>        listenSocket = socket.socket()   <span class="hljs-comment">#创建套接字</span>        listenSocket.bind((ip, port))   <span class="hljs-comment">#绑定地址和端口号</span>        listenSocket.listen(<span class="hljs-number">1</span>)   <span class="hljs-comment">#监听套接字, 最多允许一个连接</span>        listenSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)   <span class="hljs-comment">#设置套接字</span>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;tcp waiting...&#x27;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;accepting.....&quot;</span>)            conn, addr = listenSocket.accept()   <span class="hljs-comment">#接收连接请求，返回收发数据的套接字对象和客户端地址</span>            <span class="hljs-built_in">print</span>(addr, <span class="hljs-string">&quot;connected&quot;</span>)            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                data = conn.recv(<span class="hljs-number">1024</span>)   <span class="hljs-comment">#接收数据（1024字节大小）</span>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>):   <span class="hljs-comment">#判断客户端是否断开连接</span>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;close socket&quot;</span>)                    conn.close()   <span class="hljs-comment">#关闭套接字</span>                    <span class="hljs-keyword">break</span>    <span class="hljs-comment">#             print(data)</span>                code_utf8 = <span class="hljs-built_in">bytes</span>.decode(data)                <span class="hljs-built_in">print</span>(code_utf8)                ret = conn.send(data)   <span class="hljs-comment">#发送数据</span>                <span class="hljs-keyword">if</span> code_utf8 == <span class="hljs-string">&quot;led1 open&quot;</span>:                    B.value(<span class="hljs-number">0</span>)                <span class="hljs-keyword">if</span> code_utf8 == <span class="hljs-string">&quot;led2 open&quot;</span>:                    C.value(<span class="hljs-number">0</span>)                <span class="hljs-keyword">if</span> code_utf8 == <span class="hljs-string">&quot;led1 down&quot;</span>:                    B.value(<span class="hljs-number">1</span>)                <span class="hljs-keyword">if</span> code_utf8 == <span class="hljs-string">&quot;led2 down&quot;</span>:                    C.value(<span class="hljs-number">1</span>)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">if</span>(listenSocket):   <span class="hljs-comment">#判断套接字是否为空</span>            listenSocket.close()   <span class="hljs-comment">#关闭套接字</span>wifi_connect()</code></pre><h3 id="pc-端"><a class="markdownIt-Anchor" href="#pc-端"></a> PC 端</h3><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-comment"># PC TCP Client</span><span class="hljs-keyword">import</span> socket               <span class="hljs-comment"># 导入 socket 模块</span>s = socket.socket()         <span class="hljs-comment"># 创建 socket 对象</span>host = <span class="hljs-string">&#x27;192.168.2.231&#x27;</span>      <span class="hljs-comment"># esp32 ip</span>port = <span class="hljs-number">10000</span>                <span class="hljs-comment"># 设置端口号</span>s.connect((host, port))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        msg = raw_input(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>)        s.send(msg)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32开发环境搭建</title>
      <link href="/2020/11/25/stm32_kai_fa_huan_jing_da_jian/stm32_kai_fa_huan_jing_da_jian/"/>
      <url>/2020/11/25/stm32_kai_fa_huan_jing_da_jian/stm32_kai_fa_huan_jing_da_jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p><a target="_blank" rel="noopener" href="https://www.st.com/en/development-tools/stm32cubeide.html">Integrated Development Environment for STM32</a></p><p>汉化和安装主题请参考下面的链接<br /><a target="_blank" rel="noopener" href="https://blog.csdn.net/wct3344142/article/details/104142863">https://blog.csdn.net/wct3344142/article/details/104142863</a></p><p>我使用的网址是</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/eclipse/</span>technology<span class="hljs-regexp">/babel/u</span>pdate-site<span class="hljs-regexp">/R0.18.1/</span><span class="hljs-number">2019</span>-<span class="hljs-number">12</span>/</code></pre><p>选项和上面的链接里的不一样<br /><a href="https://hp-l.gitee.io/2020/11/25/STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/stm32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IDE%E6%B1%89%E5%8C%96.png">thonny_download.png</a></p><h2 id="新建工程"><a class="markdownIt-Anchor" href="#新建工程"></a> 新建工程</h2><p>流程如图(点开查看大图)</p><p><img src="./IDE_new_project.png" alt="IDE_new_project" /><br /><img src="./IDE_new_project_1.png" alt="IDE_new_project_1" /><br /><img src="./IDE_new_project_2.png" alt="IDE_new_project_2" /></p><p><img src="./IDE_new_project_3.png" alt="IDE_new_project_3" /><br /><img src="./IDE_new_project_4.png" alt="IDE_new_project_4" /><br /><img src="./IDE_new_project_5.png" alt="IDE_new_project_5" /><br /><img src="./IDE_new_project_6.png" alt="IDE_new_project_6" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Arduino_ESP2866环境</title>
      <link href="/2020/11/21/da_jian_arduino_esp2866_huan_jing/da_jian_arduino_esp2866_huan_jing/"/>
      <url>/2020/11/21/da_jian_arduino_esp2866_huan_jing/da_jian_arduino_esp2866_huan_jing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载-arduino-ide"><a class="markdownIt-Anchor" href="#下载-arduino-ide"></a> 下载 Arduino IDE</h2><ul><li><p><a target="_blank" rel="noopener" href="https://www.arduino.cc/">Arduino 官网</a></p></li><li><p><a target="_blank" rel="noopener" href="https://downloads.arduino.cc/arduino-1.8.13-windows.zip">Arduino IDE 1.8.13</a></p></li></ul><p>下载完成后打开 arduino.exe<br /><img src="./%E6%89%93%E5%BC%80arduino_IDE.png" alt="打开arduino_IDE.png" /></p><h2 id="添加-json-文件"><a class="markdownIt-Anchor" href="#添加-json-文件"></a> 添加 json 文件</h2><p>打开首选项<br /><img src="./%E9%A6%96%E9%80%89%E9%A1%B9.png" alt="首选项.png" /><br /><img src="./%E7%AE%A1%E7%90%86%E5%99%A8%E7%BD%91%E5%9D%80.png" alt="管理器网址.png" /><br />在开发板管理器网址填入</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>arduino.esp8266.com<span class="hljs-regexp">/stable/</span>package_esp8266com_index.json</code></pre><p>或者</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>wechat.doit.am/package_esp8266com_index.json</code></pre><p>在<a target="_blank" rel="noopener" href="https://github.com/esp8266/Arduino">GitHub 上的项目</a>里有最新的版本，但是需要科学上网所以选择第二个</p><h2 id="添加-esp8266-开发板"><a class="markdownIt-Anchor" href="#添加-esp8266-开发板"></a> 添加 ESP8266 开发板</h2><p>搜索栏键入 8266<br /><img src="./%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E6%9D%BF.png" alt="添加开发板.png" /><br /><img src="./%E6%9F%A5%E6%89%BE%E5%BC%80%E5%8F%91%E6%9D%BF.png" alt="查找开发板.png" /><br />如果出现下载失败可以从这里下载</p><ul><li><p>如果安装过其他版本的 esp8266sdk，请先删除，再使用本安装包。</p></li><li><p>解压完成后，再打开 Arduino IDE，即可在 菜单栏&gt;工具&gt;开发板 中找到你使用的 esp8266 开发板。</p></li></ul><p>来自 Arduino 中文社区的大佬</p><ul><li><a target="_blank" rel="noopener" href="https://share.weiyun.com/5CGEKJO">https://share.weiyun.com/5CGEKJO</a></li></ul><p>安装完成后重启 Arduino IDE 就会有显示了<br /><img src="./END.png" alt="END.png" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> ESP2866 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机定时切换壁纸</title>
      <link href="/2020/11/15/shou_ji_ding_shi_qie_huan_bi_zhi/shou_ji_ding_shi_qie_huan_bi_zhi/"/>
      <url>/2020/11/15/shou_ji_ding_shi_qie_huan_bi_zhi/shou_ji_ding_shi_qie_huan_bi_zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ol><li><p>手机安装 termuxAPP 和 termux_API (这里给出参考博客链接)</p><ul><li><p><a target="_blank" rel="noopener" href="https://www.sqlsec.com/2018/05/termux.html">国光的 Termux 高级终端安装使用配置教程</a></p></li><li><p><a target="_blank" rel="noopener" href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-3">跳转下载链接</a></p></li><li><p><a target="_blank" rel="noopener" href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-167">API 下载链接</a></p></li></ul></li><li><p>完成基础的安装</p></li></ol><pre><code class="hljs Bash">pkg install termux-api  <span class="hljs-comment">#termux-API</span>pkg install cronie      <span class="hljs-comment">#linux 定时软件</span></code></pre><h2 id="编辑定时运行的-shell-脚本"><a class="markdownIt-Anchor" href="#编辑定时运行的-shell-脚本"></a> 编辑定时运行的 shell 脚本</h2><p>编辑 <a target="_blank" rel="noopener" href="http://bizhi.sh">bizhi.sh</a> 文件</p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>termux-wallpaper -f ./壁纸所在目录/$((RANDOM%<span class="hljs-number">152</span>+<span class="hljs-number">1</span>)).jpg<span class="hljs-comment"># $((RANDOM%152+1))是用来随机取数的</span><span class="hljs-comment"># $((RANDOM%152+1))可以换成文件名</span></code></pre><p><img src="https://i.loli.net/2020/11/15/DxGUVOYLvrMKJc7.png" alt="我的文件命名格式" /></p><h2 id="编辑定时任务文件"><a class="markdownIt-Anchor" href="#编辑定时任务文件"></a> 编辑定时任务文件</h2><p>终端输入</p><pre><code class="hljs Bash">crontab -e</code></pre><p>再输入</p><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 每隔五分钟执行一次bizhi.sh文件</span>*<span class="hljs-string">/5</span> * * * * <span class="hljs-string">./</span>文件路径<span class="hljs-string">/bizhi.sh</span></code></pre><p>应为 Termux 默认不启动 crontab，所以进入 Termux 要开启一下</p><pre><code class="hljs Bash">crond start <span class="hljs-comment">#开启</span></code></pre><p>在手机设置中，termux 和 termux-API 都开启手动管理</p><p><img src="https://i.loli.net/2020/11/15/I3X1TJlPrbMBypf.jpg" alt="手机管理页面" /></p><iframe height=520 width=776   src="//player.bilibili.com/player.html?aid=458590572&bvid=BV1Y5411n7tx&cid=280885187&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="max-width: 100%, text-align: center" > </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micropython联网同步时间</title>
      <link href="/2020/11/09/micropython_lian_wang_tong_bu_shi_jian/micropython_lian_wang_tong_bu_shi_jian/"/>
      <url>/2020/11/09/micropython_lian_wang_tong_bu_shi_jian/micropython_lian_wang_tong_bu_shi_jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ntp 服务器可以自己选择，可以使用爬虫爬去时间也可以用 NTP 服务器同步，将 wifi_connect()函数最后一行 get_time_py 换成 get_time()即可<br />直接上程序</p><pre><code class="hljs python"><span class="hljs-comment"># This file is executed on every boot (including wake-boot from deepsleep)</span><span class="hljs-comment">#import esp</span><span class="hljs-comment">#esp.osdebug(None)</span><span class="hljs-comment">#import webrepl</span><span class="hljs-comment">#webrepl.start()</span><span class="hljs-comment">#使用ESP32上的MicroPython連接Wi-Fi網絡</span><span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin,RTC<span class="hljs-keyword">import</span> network    <span class="hljs-comment">#網絡模塊</span><span class="hljs-keyword">import</span> time       <span class="hljs-comment">#計時器模塊</span><span class="hljs-keyword">import</span> ntptime    <span class="hljs-comment">#ntptime網絡時間協議模塊</span><span class="hljs-comment">#自动联网</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">wifi_connect</span>():  wifi_led=Pin(<span class="hljs-number">18</span>,Pin.OUT)             <span class="hljs-comment"># 初始化LED燈，可自定義</span>  wlan = network.WLAN(network.STA_IF)  <span class="hljs-comment">#</span>  wlan.active(<span class="hljs-literal">True</span>)                    <span class="hljs-comment"># 激活網絡接口</span>  start_time=time.time()               <span class="hljs-comment"># 記錄開始時間</span>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> wlan.isconnected():              <span class="hljs-comment"># 如若聯網失敗</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前无线未联网，正在连接中....&quot;</span>)    <span class="hljs-comment"># wlan.connect(&quot;此处改为你的无线网名称&quot;, &quot;无线网密码&quot;)</span>    wlan.connect(<span class="hljs-string">&#x27;XXXXXXXX&#x27;</span>,<span class="hljs-string">&#x27;XXXXXXXX&#x27;</span>)   <span class="hljs-comment"># 無綫網SSID、密碼</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> wlan.isconnected():         <span class="hljs-comment"># 如若還未連接成功，LED則會以閃爍的方式提示未連接到WIFI</span>      wifi_led.value(<span class="hljs-number">0</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)       <span class="hljs-comment"># 延時函數1000毫秒</span>      wifi_led.value(<span class="hljs-number">1</span>)      time.sleep_ms(<span class="hljs-number">1000</span>)      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接到wifi....&quot;</span>)      <span class="hljs-built_in">print</span>(time.time())      <span class="hljs-keyword">if</span> time.time()-start_time&gt;<span class="hljs-number">15</span>:       <span class="hljs-comment"># 如若超過15秒還未連接則退出鏈接</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;連接失敗!!!請檢查無綫網名稱和密碼是否正確...&quot;</span>)        <span class="hljs-keyword">break</span>  <span class="hljs-keyword">if</span> wlan.isconnected():                  <span class="hljs-comment"># 如若連接成功</span>    wifi_led.value(<span class="hljs-number">1</span>)                     <span class="hljs-comment"># LED燈常亮</span>    IP_info=wlan.ifconfig()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已連接WIFI，信息如下：&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IP地址：&quot;</span>+IP_info[<span class="hljs-number">0</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子網掩碼：&quot;</span>+IP_info[<span class="hljs-number">1</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;網関：&quot;</span>+IP_info[<span class="hljs-number">2</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNS：&quot;</span>+IP_info[<span class="hljs-number">3</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    get_time_py()<span class="hljs-comment">#同步時間</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;同步時間&quot;</span>)    <span class="hljs-built_in">print</span>()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;同步前本地時間：%s&quot;</span> %<span class="hljs-built_in">str</span>(time.localtime()))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##&quot;</span>)    ntptime.NTP_DELTA = <span class="hljs-number">3155644800</span>    <span class="hljs-comment"># 設置  UTC+8偏移時間（秒），不不設置就是UTC0</span><span class="hljs-comment">#     ntptime.host = &#x27;pool.ntp.org&#x27;  # 可選ntp服務器為阿里雲服務器，默認是&quot;pool.ntp.org&quot;</span>    ntptime.host = <span class="hljs-string">&#x27;edu.ntp.org.cn&#x27;</span><span class="hljs-comment">#     ntptime.host = &#x27;210.72.145.44&#x27; # 國家授時中心服務器IP地址</span><span class="hljs-comment">#     ntptime.host = &#x27;ntp1.aliyun.com&#x27;</span><span class="hljs-comment">#     ntptime.host = &#x27;cn.ntp.org.cn&#x27;</span>    ntptime.settime()                 <span class="hljs-comment"># 修改設備時間</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;同步后本地時間：%s&quot;</span> %<span class="hljs-built_in">str</span>(time.localtime()))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;##################################################&quot;</span>)    rtc = RTC()    <span class="hljs-built_in">print</span>(rtc.datetime())<span class="hljs-comment"># 爬取時間</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time_py</span>():    time_api_url = <span class="hljs-string">&quot;&quot;&quot;http://quan.suning.com/getSysTime.do&quot;&quot;&quot;</span>    r = request.get(time_api_url)    content = r.text    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;爬取時間...&#x27;</span>)    time = re.search(        <span class="hljs-string">r&#x27;&#123;&quot;sysTime2&quot;:&quot;(.*?)-(.*?)-(.*?) (.*?):(.*?):(.*?)&quot;,&quot;sysTime1&quot;:&quot;&#x27;</span>, content        )    <span class="hljs-built_in">print</span>(r.text[<span class="hljs-number">13</span>:<span class="hljs-number">29</span>])    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>]))    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>]))    mm = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">27</span>:<span class="hljs-number">29</span>])<span class="hljs-comment"># 分鐘</span>    hh = <span class="hljs-built_in">int</span>(r.text[<span class="hljs-number">23</span>:<span class="hljs-number">26</span>])<span class="hljs-comment"># 小時</span>    rtc = RTC()    time_date = rtc.datetime()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重置時間！&#x27;</span>)    rtc.datetime((time_date[<span class="hljs-number">0</span>], time_date[<span class="hljs-number">1</span>], time_date[<span class="hljs-number">2</span>], time_date[<span class="hljs-number">3</span>], hh, mm, time_date[<span class="hljs-number">6</span>], time_date[<span class="hljs-number">7</span>]))    rtc.datetime()<span class="hljs-comment">#開始執行聯網</span>wifi_connect()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> micropython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32_micropython固件烧录</title>
      <link href="/2020/11/05/esp32_micropython_gu_jian_shao_lu/esp32_micropython_gu_jian_shao_lu/"/>
      <url>/2020/11/05/esp32_micropython_gu_jian_shao_lu/esp32_micropython_gu_jian_shao_lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="esp32_micropython-固件烧录"><a class="markdownIt-Anchor" href="#esp32_micropython-固件烧录"></a> ESP32_micropython 固件烧录</h2><h3 id="烧录准备"><a class="markdownIt-Anchor" href="#烧录准备"></a> 烧录准备</h3><p>1.micropython IDE：<a target="_blank" rel="noopener" href="https://thonny.org/">Thonny</a></p><p><img src="./thonny_download.png" alt="thonny_download.png" /></p><p>2.ESP32 的 micropython 固件：<a target="_blank" rel="noopener" href="https://www.micropython.org/download/esp32/">戳我进下载页面</a>，micropython 还支持其他芯片<a target="_blank" rel="noopener" href="https://www.micropython.org/download/">link</a>，下载页面有很多固件选择，由于我的是不带 SPIRAM 的，因此我选择了第一个。</p><p><img src="./micropython%E5%9B%BA%E4%BB%B6.png" alt="micropython固件" /></p><p>3.烧录工具：<br />这里提供两种，esptool 在 GitHub 上有教程，这里就不细讲。</p><ul><li><p>esptool：<a target="_blank" rel="noopener" href="https://github.com/espressif/esptool">github link</a></p></li><li><p>Thonny: micropython IDE</p></li><li><p>Flash 下载工具：<a target="_blank" rel="noopener" href="https://www.espressif.com/support/download/other-tools">link</a></p><p><img src="./%E7%83%A7%E5%BD%95%E5%B7%A5%E5%85%B7.png" alt="烧录工具.png" /></p></li></ul><p>4.ESP32 模组： 打开淘宝…</p><h3 id="烧录过程"><a class="markdownIt-Anchor" href="#烧录过程"></a> 烧录过程</h3><h4 id="使用-thonny-烧录"><a class="markdownIt-Anchor" href="#使用-thonny-烧录"></a> 使用 Thonny 烧录</h4><p>点击工具栏运行，选择“选择解释器…”</p><p><img src="./Thonny_%E7%83%A7%E5%BD%95%E5%9B%BA%E4%BB%B6.png" alt="Thonny_烧录固件.png" /><br /><img src="./Thonny_%E7%83%A7%E5%BD%95%E5%9B%BA%E4%BB%B61.png" alt="Thonny_烧录固件1.png" /></p><p>选择我们在 Micropython 官网下载的固件后点击 install<br />这是从 ESP 官网上下载的启动模式方法：</p><p><img src="./%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F.png" alt="启动模式.png" /><br /><img src="./%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F1.png" alt="启动模式1.png" /></p><p>即GPIO0和GPIO2全部接地，同时按下复位按键，保持1毫秒再断开GPIO0断开接地（因为 GPIO0 默认上拉），便开始下载。</p><h4 id="使用-flash-下载工具"><a class="markdownIt-Anchor" href="#使用-flash-下载工具"></a> 使用 Flash 下载工具</h4><p>从官网下载了工具后双击打开，等待几秒后，点击 ESP32downloadTools，选择我们在 Micropython 官网下载的固件后点击 START</p><p><img src="./flash_download.png" alt="flash_download.png" /><br /><img src="./flash_download1.png" alt="flash_download1.png" /></p><p>再按照上文中的启动方法启动即可下载。</p><p>成功之后 shell 会出现下图：</p><p><img src="./SHELL.png" alt="SHELL.png" /></p><p>像 python 一样可以实时输入，ESP32 可以直接看到 LED 灯被点亮</p>]]></content>
      
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> micropython </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
